/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 444.0, "minX": 0.0, "maxY": 1.4290205E7, "series": [{"data": [[0.0, 444.0], [0.1, 445.0], [0.2, 447.0], [0.3, 448.0], [0.4, 450.0], [0.5, 451.0], [0.6, 451.0], [0.7, 452.0], [0.8, 452.0], [0.9, 452.0], [1.0, 453.0], [1.1, 453.0], [1.2, 454.0], [1.3, 455.0], [1.4, 455.0], [1.5, 455.0], [1.6, 456.0], [1.7, 456.0], [1.8, 457.0], [1.9, 457.0], [2.0, 457.0], [2.1, 457.0], [2.2, 458.0], [2.3, 458.0], [2.4, 458.0], [2.5, 459.0], [2.6, 459.0], [2.7, 459.0], [2.8, 460.0], [2.9, 460.0], [3.0, 461.0], [3.1, 461.0], [3.2, 461.0], [3.3, 462.0], [3.4, 462.0], [3.5, 463.0], [3.6, 463.0], [3.7, 463.0], [3.8, 463.0], [3.9, 464.0], [4.0, 464.0], [4.1, 464.0], [4.2, 464.0], [4.3, 465.0], [4.4, 465.0], [4.5, 465.0], [4.6, 465.0], [4.7, 465.0], [4.8, 466.0], [4.9, 466.0], [5.0, 467.0], [5.1, 467.0], [5.2, 467.0], [5.3, 468.0], [5.4, 468.0], [5.5, 468.0], [5.6, 468.0], [5.7, 469.0], [5.8, 469.0], [5.9, 470.0], [6.0, 470.0], [6.1, 470.0], [6.2, 471.0], [6.3, 471.0], [6.4, 471.0], [6.5, 471.0], [6.6, 472.0], [6.7, 472.0], [6.8, 473.0], [6.9, 473.0], [7.0, 473.0], [7.1, 474.0], [7.2, 474.0], [7.3, 474.0], [7.4, 475.0], [7.5, 475.0], [7.6, 475.0], [7.7, 475.0], [7.8, 475.0], [7.9, 476.0], [8.0, 476.0], [8.1, 476.0], [8.2, 476.0], [8.3, 477.0], [8.4, 478.0], [8.5, 479.0], [8.6, 479.0], [8.7, 479.0], [8.8, 480.0], [8.9, 480.0], [9.0, 481.0], [9.1, 481.0], [9.2, 482.0], [9.3, 482.0], [9.4, 483.0], [9.5, 483.0], [9.6, 484.0], [9.7, 484.0], [9.8, 484.0], [9.9, 485.0], [10.0, 486.0], [10.1, 487.0], [10.2, 487.0], [10.3, 488.0], [10.4, 488.0], [10.5, 488.0], [10.6, 489.0], [10.7, 489.0], [10.8, 489.0], [10.9, 490.0], [11.0, 491.0], [11.1, 493.0], [11.2, 493.0], [11.3, 493.0], [11.4, 494.0], [11.5, 494.0], [11.6, 495.0], [11.7, 496.0], [11.8, 496.0], [11.9, 497.0], [12.0, 497.0], [12.1, 498.0], [12.2, 498.0], [12.3, 498.0], [12.4, 499.0], [12.5, 500.0], [12.6, 500.0], [12.7, 501.0], [12.8, 502.0], [12.9, 503.0], [13.0, 504.0], [13.1, 504.0], [13.2, 504.0], [13.3, 505.0], [13.4, 506.0], [13.5, 507.0], [13.6, 507.0], [13.7, 507.0], [13.8, 508.0], [13.9, 509.0], [14.0, 510.0], [14.1, 510.0], [14.2, 511.0], [14.3, 511.0], [14.4, 512.0], [14.5, 513.0], [14.6, 513.0], [14.7, 513.0], [14.8, 515.0], [14.9, 515.0], [15.0, 516.0], [15.1, 516.0], [15.2, 517.0], [15.3, 517.0], [15.4, 518.0], [15.5, 519.0], [15.6, 520.0], [15.7, 520.0], [15.8, 520.0], [15.9, 521.0], [16.0, 522.0], [16.1, 523.0], [16.2, 524.0], [16.3, 525.0], [16.4, 526.0], [16.5, 526.0], [16.6, 527.0], [16.7, 528.0], [16.8, 528.0], [16.9, 528.0], [17.0, 529.0], [17.1, 530.0], [17.2, 531.0], [17.3, 533.0], [17.4, 533.0], [17.5, 534.0], [17.6, 534.0], [17.7, 535.0], [17.8, 535.0], [17.9, 536.0], [18.0, 537.0], [18.1, 537.0], [18.2, 537.0], [18.3, 539.0], [18.4, 539.0], [18.5, 540.0], [18.6, 540.0], [18.7, 541.0], [18.8, 542.0], [18.9, 544.0], [19.0, 545.0], [19.1, 547.0], [19.2, 548.0], [19.3, 548.0], [19.4, 548.0], [19.5, 549.0], [19.6, 549.0], [19.7, 549.0], [19.8, 551.0], [19.9, 551.0], [20.0, 553.0], [20.1, 553.0], [20.2, 555.0], [20.3, 557.0], [20.4, 557.0], [20.5, 559.0], [20.6, 560.0], [20.7, 561.0], [20.8, 561.0], [20.9, 562.0], [21.0, 564.0], [21.1, 565.0], [21.2, 565.0], [21.3, 566.0], [21.4, 567.0], [21.5, 568.0], [21.6, 568.0], [21.7, 569.0], [21.8, 570.0], [21.9, 570.0], [22.0, 571.0], [22.1, 573.0], [22.2, 573.0], [22.3, 574.0], [22.4, 576.0], [22.5, 577.0], [22.6, 579.0], [22.7, 580.0], [22.8, 580.0], [22.9, 582.0], [23.0, 582.0], [23.1, 583.0], [23.2, 583.0], [23.3, 583.0], [23.4, 584.0], [23.5, 584.0], [23.6, 587.0], [23.7, 589.0], [23.8, 589.0], [23.9, 590.0], [24.0, 591.0], [24.1, 592.0], [24.2, 592.0], [24.3, 593.0], [24.4, 595.0], [24.5, 595.0], [24.6, 596.0], [24.7, 598.0], [24.8, 599.0], [24.9, 599.0], [25.0, 601.0], [25.1, 603.0], [25.2, 603.0], [25.3, 603.0], [25.4, 604.0], [25.5, 605.0], [25.6, 606.0], [25.7, 610.0], [25.8, 610.0], [25.9, 612.0], [26.0, 612.0], [26.1, 613.0], [26.2, 614.0], [26.3, 616.0], [26.4, 616.0], [26.5, 618.0], [26.6, 619.0], [26.7, 620.0], [26.8, 620.0], [26.9, 621.0], [27.0, 622.0], [27.1, 626.0], [27.2, 628.0], [27.3, 629.0], [27.4, 629.0], [27.5, 629.0], [27.6, 630.0], [27.7, 630.0], [27.8, 631.0], [27.9, 633.0], [28.0, 634.0], [28.1, 635.0], [28.2, 638.0], [28.3, 639.0], [28.4, 640.0], [28.5, 640.0], [28.6, 642.0], [28.7, 643.0], [28.8, 644.0], [28.9, 646.0], [29.0, 646.0], [29.1, 646.0], [29.2, 647.0], [29.3, 648.0], [29.4, 648.0], [29.5, 650.0], [29.6, 651.0], [29.7, 651.0], [29.8, 654.0], [29.9, 654.0], [30.0, 657.0], [30.1, 659.0], [30.2, 662.0], [30.3, 665.0], [30.4, 665.0], [30.5, 668.0], [30.6, 671.0], [30.7, 674.0], [30.8, 677.0], [30.9, 677.0], [31.0, 678.0], [31.1, 683.0], [31.2, 683.0], [31.3, 685.0], [31.4, 686.0], [31.5, 687.0], [31.6, 690.0], [31.7, 691.0], [31.8, 694.0], [31.9, 697.0], [32.0, 698.0], [32.1, 699.0], [32.2, 700.0], [32.3, 701.0], [32.4, 701.0], [32.5, 702.0], [32.6, 704.0], [32.7, 707.0], [32.8, 710.0], [32.9, 711.0], [33.0, 713.0], [33.1, 715.0], [33.2, 721.0], [33.3, 725.0], [33.4, 726.0], [33.5, 728.0], [33.6, 731.0], [33.7, 734.0], [33.8, 738.0], [33.9, 740.0], [34.0, 742.0], [34.1, 742.0], [34.2, 744.0], [34.3, 749.0], [34.4, 750.0], [34.5, 763.0], [34.6, 766.0], [34.7, 768.0], [34.8, 771.0], [34.9, 776.0], [35.0, 780.0], [35.1, 781.0], [35.2, 789.0], [35.3, 790.0], [35.4, 798.0], [35.5, 801.0], [35.6, 801.0], [35.7, 803.0], [35.8, 805.0], [35.9, 809.0], [36.0, 822.0], [36.1, 830.0], [36.2, 837.0], [36.3, 844.0], [36.4, 854.0], [36.5, 861.0], [36.6, 872.0], [36.7, 873.0], [36.8, 882.0], [36.9, 885.0], [37.0, 888.0], [37.1, 892.0], [37.2, 896.0], [37.3, 907.0], [37.4, 917.0], [37.5, 921.0], [37.6, 924.0], [37.7, 926.0], [37.8, 928.0], [37.9, 932.0], [38.0, 939.0], [38.1, 940.0], [38.2, 944.0], [38.3, 960.0], [38.4, 967.0], [38.5, 972.0], [38.6, 972.0], [38.7, 973.0], [38.8, 981.0], [38.9, 986.0], [39.0, 990.0], [39.1, 993.0], [39.2, 995.0], [39.3, 996.0], [39.4, 1003.0], [39.5, 1007.0], [39.6, 1016.0], [39.7, 1024.0], [39.8, 1029.0], [39.9, 1033.0], [40.0, 1045.0], [40.1, 1049.0], [40.2, 1053.0], [40.3, 1057.0], [40.4, 1069.0], [40.5, 1075.0], [40.6, 1087.0], [40.7, 1088.0], [40.8, 1089.0], [40.9, 1094.0], [41.0, 1097.0], [41.1, 1102.0], [41.2, 1107.0], [41.3, 1109.0], [41.4, 1111.0], [41.5, 1117.0], [41.6, 1125.0], [41.7, 1126.0], [41.8, 1141.0], [41.9, 1144.0], [42.0, 1151.0], [42.1, 1163.0], [42.2, 1167.0], [42.3, 1170.0], [42.4, 1174.0], [42.5, 1176.0], [42.6, 1177.0], [42.7, 1180.0], [42.8, 1181.0], [42.9, 1183.0], [43.0, 1183.0], [43.1, 1193.0], [43.2, 1193.0], [43.3, 1200.0], [43.4, 1206.0], [43.5, 1215.0], [43.6, 1218.0], [43.7, 1231.0], [43.8, 1233.0], [43.9, 1235.0], [44.0, 1237.0], [44.1, 1242.0], [44.2, 1249.0], [44.3, 1254.0], [44.4, 1258.0], [44.5, 1259.0], [44.6, 1261.0], [44.7, 1263.0], [44.8, 1267.0], [44.9, 1273.0], [45.0, 1281.0], [45.1, 1285.0], [45.2, 1289.0], [45.3, 1293.0], [45.4, 1294.0], [45.5, 1301.0], [45.6, 1304.0], [45.7, 1305.0], [45.8, 1316.0], [45.9, 1328.0], [46.0, 1328.0], [46.1, 1330.0], [46.2, 1331.0], [46.3, 1345.0], [46.4, 1351.0], [46.5, 1354.0], [46.6, 1363.0], [46.7, 1365.0], [46.8, 1372.0], [46.9, 1377.0], [47.0, 1386.0], [47.1, 1397.0], [47.2, 1401.0], [47.3, 1410.0], [47.4, 1416.0], [47.5, 1418.0], [47.6, 1420.0], [47.7, 1424.0], [47.8, 1425.0], [47.9, 1425.0], [48.0, 1434.0], [48.1, 1437.0], [48.2, 1441.0], [48.3, 1450.0], [48.4, 1454.0], [48.5, 1457.0], [48.6, 1460.0], [48.7, 1483.0], [48.8, 1488.0], [48.9, 1490.0], [49.0, 1493.0], [49.1, 1497.0], [49.2, 1510.0], [49.3, 1528.0], [49.4, 1537.0], [49.5, 1539.0], [49.6, 1550.0], [49.7, 1550.0], [49.8, 1552.0], [49.9, 1553.0], [50.0, 1553.0], [50.1, 1556.0], [50.2, 1569.0], [50.3, 1576.0], [50.4, 1577.0], [50.5, 1587.0], [50.6, 1592.0], [50.7, 1595.0], [50.8, 1601.0], [50.9, 1603.0], [51.0, 1604.0], [51.1, 1613.0], [51.2, 1616.0], [51.3, 1622.0], [51.4, 1635.0], [51.5, 1636.0], [51.6, 1637.0], [51.7, 1639.0], [51.8, 1640.0], [51.9, 1641.0], [52.0, 1643.0], [52.1, 1651.0], [52.2, 1665.0], [52.3, 1668.0], [52.4, 1691.0], [52.5, 1692.0], [52.6, 1695.0], [52.7, 1705.0], [52.8, 1710.0], [52.9, 1713.0], [53.0, 1719.0], [53.1, 1732.0], [53.2, 1737.0], [53.3, 1741.0], [53.4, 1741.0], [53.5, 1749.0], [53.6, 1758.0], [53.7, 1770.0], [53.8, 1772.0], [53.9, 1776.0], [54.0, 1780.0], [54.1, 1781.0], [54.2, 1788.0], [54.3, 1796.0], [54.4, 1804.0], [54.5, 1814.0], [54.6, 1831.0], [54.7, 1840.0], [54.8, 1845.0], [54.9, 1847.0], [55.0, 1854.0], [55.1, 1859.0], [55.2, 1864.0], [55.3, 1869.0], [55.4, 1872.0], [55.5, 1886.0], [55.6, 1887.0], [55.7, 1889.0], [55.8, 1896.0], [55.9, 1911.0], [56.0, 1913.0], [56.1, 1924.0], [56.2, 1933.0], [56.3, 1945.0], [56.4, 1953.0], [56.5, 1961.0], [56.6, 1969.0], [56.7, 1976.0], [56.8, 1977.0], [56.9, 1980.0], [57.0, 1983.0], [57.1, 1985.0], [57.2, 1990.0], [57.3, 1997.0], [57.4, 2003.0], [57.5, 2018.0], [57.6, 2050.0], [57.7, 2059.0], [57.8, 2059.0], [57.9, 2061.0], [58.0, 2073.0], [58.1, 2075.0], [58.2, 2087.0], [58.3, 2092.0], [58.4, 2098.0], [58.5, 2101.0], [58.6, 2101.0], [58.7, 2113.0], [58.8, 2118.0], [58.9, 2124.0], [59.0, 2129.0], [59.1, 2137.0], [59.2, 2145.0], [59.3, 2160.0], [59.4, 2173.0], [59.5, 2190.0], [59.6, 2194.0], [59.7, 2197.0], [59.8, 2202.0], [59.9, 2205.0], [60.0, 2209.0], [60.1, 2213.0], [60.2, 2223.0], [60.3, 2228.0], [60.4, 2240.0], [60.5, 2244.0], [60.6, 2250.0], [60.7, 2262.0], [60.8, 2267.0], [60.9, 2273.0], [61.0, 2279.0], [61.1, 2286.0], [61.2, 2294.0], [61.3, 2303.0], [61.4, 2303.0], [61.5, 2307.0], [61.6, 2312.0], [61.7, 2318.0], [61.8, 2325.0], [61.9, 2327.0], [62.0, 2331.0], [62.1, 2335.0], [62.2, 2345.0], [62.3, 2346.0], [62.4, 2356.0], [62.5, 2358.0], [62.6, 2365.0], [62.7, 2377.0], [62.8, 2389.0], [62.9, 2403.0], [63.0, 2405.0], [63.1, 2406.0], [63.2, 2420.0], [63.3, 2438.0], [63.4, 2443.0], [63.5, 2452.0], [63.6, 2459.0], [63.7, 2463.0], [63.8, 2467.0], [63.9, 2475.0], [64.0, 2479.0], [64.1, 2486.0], [64.2, 2497.0], [64.3, 2513.0], [64.4, 2520.0], [64.5, 2522.0], [64.6, 2523.0], [64.7, 2535.0], [64.8, 2549.0], [64.9, 2554.0], [65.0, 2563.0], [65.1, 2570.0], [65.2, 2578.0], [65.3, 2580.0], [65.4, 2582.0], [65.5, 2584.0], [65.6, 2600.0], [65.7, 2617.0], [65.8, 2628.0], [65.9, 2633.0], [66.0, 2634.0], [66.1, 2641.0], [66.2, 2642.0], [66.3, 2647.0], [66.4, 2662.0], [66.5, 2672.0], [66.6, 2684.0], [66.7, 2684.0], [66.8, 2693.0], [66.9, 2708.0], [67.0, 2714.0], [67.1, 2722.0], [67.2, 2731.0], [67.3, 2750.0], [67.4, 2765.0], [67.5, 2766.0], [67.6, 2769.0], [67.7, 2777.0], [67.8, 2780.0], [67.9, 2790.0], [68.0, 2792.0], [68.1, 2801.0], [68.2, 2803.0], [68.3, 2811.0], [68.4, 2818.0], [68.5, 2827.0], [68.6, 2833.0], [68.7, 2837.0], [68.8, 2840.0], [68.9, 2846.0], [69.0, 2850.0], [69.1, 2880.0], [69.2, 2882.0], [69.3, 2897.0], [69.4, 2905.0], [69.5, 2908.0], [69.6, 2921.0], [69.7, 2929.0], [69.8, 2934.0], [69.9, 2970.0], [70.0, 2983.0], [70.1, 3004.0], [70.2, 3007.0], [70.3, 3028.0], [70.4, 3029.0], [70.5, 3047.0], [70.6, 3058.0], [70.7, 3072.0], [70.8, 3081.0], [70.9, 3084.0], [71.0, 3095.0], [71.1, 3099.0], [71.2, 3100.0], [71.3, 3115.0], [71.4, 3136.0], [71.5, 3139.0], [71.6, 3158.0], [71.7, 3165.0], [71.8, 3178.0], [71.9, 3183.0], [72.0, 3202.0], [72.1, 3230.0], [72.2, 3234.0], [72.3, 3243.0], [72.4, 3255.0], [72.5, 3258.0], [72.6, 3264.0], [72.7, 3281.0], [72.8, 3303.0], [72.9, 3311.0], [73.0, 3324.0], [73.1, 3336.0], [73.2, 3339.0], [73.3, 3344.0], [73.4, 3371.0], [73.5, 3373.0], [73.6, 3375.0], [73.7, 3382.0], [73.8, 3397.0], [73.9, 3405.0], [74.0, 3421.0], [74.1, 3423.0], [74.2, 3441.0], [74.3, 3453.0], [74.4, 3456.0], [74.5, 3478.0], [74.6, 3482.0], [74.7, 3504.0], [74.8, 3541.0], [74.9, 3552.0], [75.0, 3559.0], [75.1, 3576.0], [75.2, 3597.0], [75.3, 3603.0], [75.4, 3623.0], [75.5, 3634.0], [75.6, 3642.0], [75.7, 3647.0], [75.8, 3668.0], [75.9, 3683.0], [76.0, 3693.0], [76.1, 3705.0], [76.2, 3711.0], [76.3, 3720.0], [76.4, 3749.0], [76.5, 3757.0], [76.6, 3775.0], [76.7, 3794.0], [76.8, 3832.0], [76.9, 3844.0], [77.0, 3849.0], [77.1, 3851.0], [77.2, 3855.0], [77.3, 3874.0], [77.4, 3896.0], [77.5, 3898.0], [77.6, 3909.0], [77.7, 3928.0], [77.8, 3935.0], [77.9, 3964.0], [78.0, 3971.0], [78.1, 3986.0], [78.2, 4012.0], [78.3, 4023.0], [78.4, 4046.0], [78.5, 4060.0], [78.6, 4075.0], [78.7, 4089.0], [78.8, 4118.0], [78.9, 4119.0], [79.0, 4149.0], [79.1, 4163.0], [79.2, 4168.0], [79.3, 4172.0], [79.4, 4195.0], [79.5, 4230.0], [79.6, 4241.0], [79.7, 4280.0], [79.8, 4287.0], [79.9, 4299.0], [80.0, 4315.0], [80.1, 4323.0], [80.2, 4348.0], [80.3, 4415.0], [80.4, 4422.0], [80.5, 4485.0], [80.6, 4505.0], [80.7, 4565.0], [80.8, 4576.0], [80.9, 4621.0], [81.0, 4653.0], [81.1, 4661.0], [81.2, 4677.0], [81.3, 4695.0], [81.4, 4749.0], [81.5, 4750.0], [81.6, 4806.0], [81.7, 4812.0], [81.8, 4845.0], [81.9, 4897.0], [82.0, 4935.0], [82.1, 4986.0], [82.2, 5001.0], [82.3, 5005.0], [82.4, 5038.0], [82.5, 5081.0], [82.6, 5089.0], [82.7, 5212.0], [82.8, 5236.0], [82.9, 5264.0], [83.0, 5266.0], [83.1, 5330.0], [83.2, 5340.0], [83.3, 5459.0], [83.4, 5514.0], [83.5, 5561.0], [83.6, 5567.0], [83.7, 5570.0], [83.8, 5579.0], [83.9, 5597.0], [84.0, 5670.0], [84.1, 5677.0], [84.2, 5696.0], [84.3, 5723.0], [84.4, 5743.0], [84.5, 5751.0], [84.6, 5814.0], [84.7, 5836.0], [84.8, 5913.0], [84.9, 5927.0], [85.0, 6009.0], [85.1, 6058.0], [85.2, 6059.0], [85.3, 6139.0], [85.4, 6171.0], [85.5, 6197.0], [85.6, 6239.0], [85.7, 6270.0], [85.8, 6314.0], [85.9, 6338.0], [86.0, 6345.0], [86.1, 6478.0], [86.2, 6526.0], [86.3, 6636.0], [86.4, 6645.0], [86.5, 6740.0], [86.6, 6831.0], [86.7, 6836.0], [86.8, 6874.0], [86.9, 6889.0], [87.0, 6963.0], [87.1, 6969.0], [87.2, 6992.0], [87.3, 7056.0], [87.4, 7073.0], [87.5, 7075.0], [87.6, 7229.0], [87.7, 7277.0], [87.8, 7306.0], [87.9, 7381.0], [88.0, 7445.0], [88.1, 7476.0], [88.2, 7499.0], [88.3, 7535.0], [88.4, 7552.0], [88.5, 7567.0], [88.6, 7761.0], [88.7, 7869.0], [88.8, 7990.0], [88.9, 8030.0], [89.0, 8061.0], [89.1, 8085.0], [89.2, 8298.0], [89.3, 8314.0], [89.4, 8454.0], [89.5, 8549.0], [89.6, 8696.0], [89.7, 8752.0], [89.8, 8886.0], [89.9, 9011.0], [90.0, 9192.0], [90.1, 9964.0], [90.2, 10063.0], [90.3, 10280.0], [90.4, 10308.0], [90.5, 10404.0], [90.6, 10757.0], [90.7, 10876.0], [90.8, 10949.0], [90.9, 11151.0], [91.0, 11216.0], [91.1, 11456.0], [91.2, 11501.0], [91.3, 11576.0], [91.4, 11652.0], [91.5, 11771.0], [91.6, 11945.0], [91.7, 12055.0], [91.8, 12222.0], [91.9, 12266.0], [92.0, 12578.0], [92.1, 12679.0], [92.2, 12721.0], [92.3, 12862.0], [92.4, 13446.0], [92.5, 13566.0], [92.6, 13593.0], [92.7, 13676.0], [92.8, 13975.0], [92.9, 14088.0], [93.0, 14355.0], [93.1, 14670.0], [93.2, 15413.0], [93.3, 15966.0], [93.4, 17236.0], [93.5, 17846.0], [93.6, 18237.0], [93.7, 18295.0], [93.8, 19142.0], [93.9, 19196.0], [94.0, 19304.0], [94.1, 19428.0], [94.2, 19641.0], [94.3, 19973.0], [94.4, 20292.0], [94.5, 20364.0], [94.6, 20482.0], [94.7, 20587.0], [94.8, 20699.0], [94.9, 20797.0], [95.0, 21018.0], [95.1, 21145.0], [95.2, 21493.0], [95.3, 21914.0], [95.4, 22118.0], [95.5, 22193.0], [95.6, 22280.0], [95.7, 22467.0], [95.8, 22575.0], [95.9, 22884.0], [96.0, 23232.0], [96.1, 23332.0], [96.2, 25508.0], [96.3, 25524.0], [96.4, 26127.0], [96.5, 26277.0], [96.6, 26761.0], [96.7, 28033.0], [96.8, 29114.0], [96.9, 29968.0], [97.0, 30322.0], [97.1, 31116.0], [97.2, 32183.0], [97.3, 32648.0], [97.4, 33810.0], [97.5, 34464.0], [97.6, 35763.0], [97.7, 37699.0], [97.8, 38516.0], [97.9, 39147.0], [98.0, 40663.0], [98.1, 42499.0], [98.2, 45105.0], [98.3, 49182.0], [98.4, 60993.0], [98.5, 64829.0], [98.6, 65254.0], [98.7, 69999.0], [98.8, 78796.0], [98.9, 83241.0], [99.0, 84422.0], [99.1, 87201.0], [99.2, 93134.0], [99.3, 95784.0], [99.4, 98382.0], [99.5, 137483.0], [99.6, 151479.0], [99.7, 179080.0], [99.8, 283097.0], [99.9, 295135.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[0.0, 644.0], [0.1, 646.0], [0.2, 648.0], [0.3, 648.0], [0.4, 651.0], [0.5, 655.0], [0.6, 661.0], [0.7, 662.0], [0.8, 663.0], [0.9, 664.0], [1.0, 665.0], [1.1, 665.0], [1.2, 666.0], [1.3, 666.0], [1.4, 668.0], [1.5, 672.0], [1.6, 672.0], [1.7, 673.0], [1.8, 675.0], [1.9, 677.0], [2.0, 677.0], [2.1, 679.0], [2.2, 682.0], [2.3, 683.0], [2.4, 684.0], [2.5, 685.0], [2.6, 687.0], [2.7, 689.0], [2.8, 692.0], [2.9, 692.0], [3.0, 696.0], [3.1, 697.0], [3.2, 697.0], [3.3, 699.0], [3.4, 701.0], [3.5, 701.0], [3.6, 703.0], [3.7, 704.0], [3.8, 704.0], [3.9, 705.0], [4.0, 706.0], [4.1, 708.0], [4.2, 710.0], [4.3, 711.0], [4.4, 712.0], [4.5, 713.0], [4.6, 715.0], [4.7, 716.0], [4.8, 719.0], [4.9, 720.0], [5.0, 720.0], [5.1, 721.0], [5.2, 722.0], [5.3, 724.0], [5.4, 725.0], [5.5, 727.0], [5.6, 729.0], [5.7, 732.0], [5.8, 732.0], [5.9, 733.0], [6.0, 734.0], [6.1, 737.0], [6.2, 739.0], [6.3, 740.0], [6.4, 741.0], [6.5, 742.0], [6.6, 742.0], [6.7, 744.0], [6.8, 745.0], [6.9, 750.0], [7.0, 751.0], [7.1, 753.0], [7.2, 755.0], [7.3, 756.0], [7.4, 757.0], [7.5, 759.0], [7.6, 760.0], [7.7, 761.0], [7.8, 762.0], [7.9, 764.0], [8.0, 765.0], [8.1, 766.0], [8.2, 767.0], [8.3, 769.0], [8.4, 769.0], [8.5, 770.0], [8.6, 771.0], [8.7, 772.0], [8.8, 774.0], [8.9, 776.0], [9.0, 777.0], [9.1, 777.0], [9.2, 778.0], [9.3, 778.0], [9.4, 780.0], [9.5, 787.0], [9.6, 787.0], [9.7, 788.0], [9.8, 789.0], [9.9, 791.0], [10.0, 792.0], [10.1, 793.0], [10.2, 793.0], [10.3, 794.0], [10.4, 796.0], [10.5, 799.0], [10.6, 802.0], [10.7, 804.0], [10.8, 807.0], [10.9, 808.0], [11.0, 808.0], [11.1, 809.0], [11.2, 810.0], [11.3, 813.0], [11.4, 813.0], [11.5, 814.0], [11.6, 815.0], [11.7, 819.0], [11.8, 820.0], [11.9, 823.0], [12.0, 825.0], [12.1, 828.0], [12.2, 828.0], [12.3, 829.0], [12.4, 830.0], [12.5, 833.0], [12.6, 834.0], [12.7, 835.0], [12.8, 835.0], [12.9, 836.0], [13.0, 837.0], [13.1, 838.0], [13.2, 839.0], [13.3, 840.0], [13.4, 842.0], [13.5, 843.0], [13.6, 843.0], [13.7, 845.0], [13.8, 846.0], [13.9, 847.0], [14.0, 850.0], [14.1, 852.0], [14.2, 854.0], [14.3, 855.0], [14.4, 856.0], [14.5, 857.0], [14.6, 858.0], [14.7, 860.0], [14.8, 860.0], [14.9, 863.0], [15.0, 864.0], [15.1, 864.0], [15.2, 867.0], [15.3, 867.0], [15.4, 871.0], [15.5, 872.0], [15.6, 874.0], [15.7, 877.0], [15.8, 877.0], [15.9, 879.0], [16.0, 879.0], [16.1, 880.0], [16.2, 881.0], [16.3, 882.0], [16.4, 884.0], [16.5, 886.0], [16.6, 886.0], [16.7, 890.0], [16.8, 892.0], [16.9, 892.0], [17.0, 894.0], [17.1, 898.0], [17.2, 898.0], [17.3, 899.0], [17.4, 901.0], [17.5, 907.0], [17.6, 908.0], [17.7, 908.0], [17.8, 909.0], [17.9, 911.0], [18.0, 912.0], [18.1, 913.0], [18.2, 913.0], [18.3, 918.0], [18.4, 919.0], [18.5, 921.0], [18.6, 922.0], [18.7, 924.0], [18.8, 925.0], [18.9, 926.0], [19.0, 927.0], [19.1, 931.0], [19.2, 933.0], [19.3, 935.0], [19.4, 936.0], [19.5, 938.0], [19.6, 939.0], [19.7, 942.0], [19.8, 942.0], [19.9, 944.0], [20.0, 946.0], [20.1, 947.0], [20.2, 951.0], [20.3, 953.0], [20.4, 955.0], [20.5, 958.0], [20.6, 959.0], [20.7, 960.0], [20.8, 961.0], [20.9, 962.0], [21.0, 965.0], [21.1, 966.0], [21.2, 971.0], [21.3, 972.0], [21.4, 974.0], [21.5, 974.0], [21.6, 977.0], [21.7, 977.0], [21.8, 978.0], [21.9, 979.0], [22.0, 985.0], [22.1, 986.0], [22.2, 986.0], [22.3, 989.0], [22.4, 991.0], [22.5, 993.0], [22.6, 994.0], [22.7, 995.0], [22.8, 998.0], [22.9, 998.0], [23.0, 1002.0], [23.1, 1008.0], [23.2, 1009.0], [23.3, 1009.0], [23.4, 1010.0], [23.5, 1015.0], [23.6, 1016.0], [23.7, 1017.0], [23.8, 1017.0], [23.9, 1020.0], [24.0, 1024.0], [24.1, 1027.0], [24.2, 1028.0], [24.3, 1032.0], [24.4, 1034.0], [24.5, 1036.0], [24.6, 1037.0], [24.7, 1040.0], [24.8, 1042.0], [24.9, 1044.0], [25.0, 1045.0], [25.1, 1053.0], [25.2, 1057.0], [25.3, 1059.0], [25.4, 1060.0], [25.5, 1063.0], [25.6, 1064.0], [25.7, 1074.0], [25.8, 1075.0], [25.9, 1080.0], [26.0, 1087.0], [26.1, 1088.0], [26.2, 1091.0], [26.3, 1093.0], [26.4, 1095.0], [26.5, 1098.0], [26.6, 1103.0], [26.7, 1106.0], [26.8, 1107.0], [26.9, 1110.0], [27.0, 1111.0], [27.1, 1114.0], [27.2, 1118.0], [27.3, 1118.0], [27.4, 1120.0], [27.5, 1122.0], [27.6, 1123.0], [27.7, 1129.0], [27.8, 1130.0], [27.9, 1131.0], [28.0, 1134.0], [28.1, 1138.0], [28.2, 1139.0], [28.3, 1141.0], [28.4, 1142.0], [28.5, 1147.0], [28.6, 1150.0], [28.7, 1156.0], [28.8, 1157.0], [28.9, 1158.0], [29.0, 1161.0], [29.1, 1168.0], [29.2, 1170.0], [29.3, 1175.0], [29.4, 1176.0], [29.5, 1177.0], [29.6, 1180.0], [29.7, 1182.0], [29.8, 1183.0], [29.9, 1186.0], [30.0, 1191.0], [30.1, 1193.0], [30.2, 1194.0], [30.3, 1199.0], [30.4, 1205.0], [30.5, 1212.0], [30.6, 1219.0], [30.7, 1220.0], [30.8, 1234.0], [30.9, 1245.0], [31.0, 1248.0], [31.1, 1257.0], [31.2, 1258.0], [31.3, 1260.0], [31.4, 1262.0], [31.5, 1267.0], [31.6, 1270.0], [31.7, 1274.0], [31.8, 1275.0], [31.9, 1276.0], [32.0, 1282.0], [32.1, 1287.0], [32.2, 1288.0], [32.3, 1293.0], [32.4, 1298.0], [32.5, 1301.0], [32.6, 1305.0], [32.7, 1308.0], [32.8, 1315.0], [32.9, 1323.0], [33.0, 1328.0], [33.1, 1336.0], [33.2, 1338.0], [33.3, 1340.0], [33.4, 1348.0], [33.5, 1353.0], [33.6, 1355.0], [33.7, 1359.0], [33.8, 1364.0], [33.9, 1369.0], [34.0, 1376.0], [34.1, 1379.0], [34.2, 1380.0], [34.3, 1381.0], [34.4, 1389.0], [34.5, 1398.0], [34.6, 1399.0], [34.7, 1407.0], [34.8, 1409.0], [34.9, 1414.0], [35.0, 1418.0], [35.1, 1447.0], [35.2, 1448.0], [35.3, 1454.0], [35.4, 1469.0], [35.5, 1474.0], [35.6, 1479.0], [35.7, 1484.0], [35.8, 1486.0], [35.9, 1494.0], [36.0, 1500.0], [36.1, 1504.0], [36.2, 1520.0], [36.3, 1523.0], [36.4, 1543.0], [36.5, 1548.0], [36.6, 1550.0], [36.7, 1552.0], [36.8, 1556.0], [36.9, 1558.0], [37.0, 1560.0], [37.1, 1566.0], [37.2, 1579.0], [37.3, 1588.0], [37.4, 1591.0], [37.5, 1601.0], [37.6, 1603.0], [37.7, 1605.0], [37.8, 1621.0], [37.9, 1625.0], [38.0, 1632.0], [38.1, 1644.0], [38.2, 1647.0], [38.3, 1648.0], [38.4, 1656.0], [38.5, 1669.0], [38.6, 1675.0], [38.7, 1677.0], [38.8, 1681.0], [38.9, 1683.0], [39.0, 1697.0], [39.1, 1703.0], [39.2, 1706.0], [39.3, 1713.0], [39.4, 1719.0], [39.5, 1725.0], [39.6, 1735.0], [39.7, 1741.0], [39.8, 1748.0], [39.9, 1753.0], [40.0, 1759.0], [40.1, 1768.0], [40.2, 1769.0], [40.3, 1771.0], [40.4, 1776.0], [40.5, 1798.0], [40.6, 1802.0], [40.7, 1804.0], [40.8, 1808.0], [40.9, 1812.0], [41.0, 1816.0], [41.1, 1819.0], [41.2, 1829.0], [41.3, 1834.0], [41.4, 1840.0], [41.5, 1845.0], [41.6, 1849.0], [41.7, 1858.0], [41.8, 1861.0], [41.9, 1863.0], [42.0, 1866.0], [42.1, 1883.0], [42.2, 1903.0], [42.3, 1908.0], [42.4, 1919.0], [42.5, 1923.0], [42.6, 1930.0], [42.7, 1936.0], [42.8, 1943.0], [42.9, 1949.0], [43.0, 1952.0], [43.1, 1959.0], [43.2, 1967.0], [43.3, 1981.0], [43.4, 1984.0], [43.5, 1987.0], [43.6, 1995.0], [43.7, 2000.0], [43.8, 2006.0], [43.9, 2010.0], [44.0, 2013.0], [44.1, 2021.0], [44.2, 2026.0], [44.3, 2033.0], [44.4, 2041.0], [44.5, 2061.0], [44.6, 2066.0], [44.7, 2086.0], [44.8, 2094.0], [44.9, 2100.0], [45.0, 2102.0], [45.1, 2106.0], [45.2, 2110.0], [45.3, 2127.0], [45.4, 2129.0], [45.5, 2136.0], [45.6, 2140.0], [45.7, 2145.0], [45.8, 2151.0], [45.9, 2155.0], [46.0, 2160.0], [46.1, 2180.0], [46.2, 2186.0], [46.3, 2202.0], [46.4, 2207.0], [46.5, 2209.0], [46.6, 2220.0], [46.7, 2244.0], [46.8, 2247.0], [46.9, 2256.0], [47.0, 2264.0], [47.1, 2271.0], [47.2, 2275.0], [47.3, 2296.0], [47.4, 2310.0], [47.5, 2315.0], [47.6, 2319.0], [47.7, 2325.0], [47.8, 2331.0], [47.9, 2340.0], [48.0, 2350.0], [48.1, 2359.0], [48.2, 2367.0], [48.3, 2379.0], [48.4, 2386.0], [48.5, 2390.0], [48.6, 2397.0], [48.7, 2401.0], [48.8, 2411.0], [48.9, 2417.0], [49.0, 2431.0], [49.1, 2434.0], [49.2, 2438.0], [49.3, 2449.0], [49.4, 2453.0], [49.5, 2458.0], [49.6, 2462.0], [49.7, 2486.0], [49.8, 2496.0], [49.9, 2506.0], [50.0, 2512.0], [50.1, 2514.0], [50.2, 2534.0], [50.3, 2546.0], [50.4, 2556.0], [50.5, 2579.0], [50.6, 2589.0], [50.7, 2625.0], [50.8, 2635.0], [50.9, 2653.0], [51.0, 2665.0], [51.1, 2667.0], [51.2, 2687.0], [51.3, 2692.0], [51.4, 2696.0], [51.5, 2701.0], [51.6, 2710.0], [51.7, 2726.0], [51.8, 2730.0], [51.9, 2758.0], [52.0, 2775.0], [52.1, 2794.0], [52.2, 2805.0], [52.3, 2829.0], [52.4, 2834.0], [52.5, 2851.0], [52.6, 2858.0], [52.7, 2867.0], [52.8, 2872.0], [52.9, 2887.0], [53.0, 2893.0], [53.1, 2910.0], [53.2, 2919.0], [53.3, 2938.0], [53.4, 2941.0], [53.5, 2949.0], [53.6, 2953.0], [53.7, 2957.0], [53.8, 2964.0], [53.9, 2971.0], [54.0, 2990.0], [54.1, 2994.0], [54.2, 3002.0], [54.3, 3016.0], [54.4, 3025.0], [54.5, 3035.0], [54.6, 3049.0], [54.7, 3053.0], [54.8, 3071.0], [54.9, 3079.0], [55.0, 3083.0], [55.1, 3097.0], [55.2, 3119.0], [55.3, 3125.0], [55.4, 3135.0], [55.5, 3154.0], [55.6, 3160.0], [55.7, 3162.0], [55.8, 3163.0], [55.9, 3172.0], [56.0, 3186.0], [56.1, 3206.0], [56.2, 3218.0], [56.3, 3238.0], [56.4, 3243.0], [56.5, 3246.0], [56.6, 3260.0], [56.7, 3266.0], [56.8, 3287.0], [56.9, 3290.0], [57.0, 3293.0], [57.1, 3301.0], [57.2, 3303.0], [57.3, 3307.0], [57.4, 3329.0], [57.5, 3334.0], [57.6, 3338.0], [57.7, 3342.0], [57.8, 3361.0], [57.9, 3373.0], [58.0, 3387.0], [58.1, 3400.0], [58.2, 3402.0], [58.3, 3419.0], [58.4, 3425.0], [58.5, 3437.0], [58.6, 3452.0], [58.7, 3452.0], [58.8, 3478.0], [58.9, 3485.0], [59.0, 3493.0], [59.1, 3499.0], [59.2, 3523.0], [59.3, 3536.0], [59.4, 3554.0], [59.5, 3557.0], [59.6, 3587.0], [59.7, 3600.0], [59.8, 3627.0], [59.9, 3638.0], [60.0, 3644.0], [60.1, 3668.0], [60.2, 3673.0], [60.3, 3682.0], [60.4, 3689.0], [60.5, 3695.0], [60.6, 3701.0], [60.7, 3710.0], [60.8, 3714.0], [60.9, 3722.0], [61.0, 3744.0], [61.1, 3747.0], [61.2, 3764.0], [61.3, 3772.0], [61.4, 3774.0], [61.5, 3776.0], [61.6, 3815.0], [61.7, 3823.0], [61.8, 3850.0], [61.9, 3867.0], [62.0, 3889.0], [62.1, 3898.0], [62.2, 3906.0], [62.3, 3915.0], [62.4, 3919.0], [62.5, 3942.0], [62.6, 3950.0], [62.7, 3957.0], [62.8, 3965.0], [62.9, 3973.0], [63.0, 3984.0], [63.1, 4012.0], [63.2, 4025.0], [63.3, 4034.0], [63.4, 4043.0], [63.5, 4063.0], [63.6, 4082.0], [63.7, 4114.0], [63.8, 4136.0], [63.9, 4156.0], [64.0, 4168.0], [64.1, 4186.0], [64.2, 4189.0], [64.3, 4231.0], [64.4, 4233.0], [64.5, 4256.0], [64.6, 4264.0], [64.7, 4275.0], [64.8, 4294.0], [64.9, 4318.0], [65.0, 4345.0], [65.1, 4362.0], [65.2, 4366.0], [65.3, 4370.0], [65.4, 4382.0], [65.5, 4409.0], [65.6, 4431.0], [65.7, 4446.0], [65.8, 4457.0], [65.9, 4488.0], [66.0, 4497.0], [66.1, 4518.0], [66.2, 4539.0], [66.3, 4551.0], [66.4, 4561.0], [66.5, 4573.0], [66.6, 4577.0], [66.7, 4584.0], [66.8, 4629.0], [66.9, 4635.0], [67.0, 4637.0], [67.1, 4643.0], [67.2, 4652.0], [67.3, 4659.0], [67.4, 4661.0], [67.5, 4667.0], [67.6, 4678.0], [67.7, 4700.0], [67.8, 4723.0], [67.9, 4761.0], [68.0, 4783.0], [68.1, 4787.0], [68.2, 4793.0], [68.3, 4795.0], [68.4, 4811.0], [68.5, 4821.0], [68.6, 4845.0], [68.7, 4867.0], [68.8, 4873.0], [68.9, 4875.0], [69.0, 4879.0], [69.1, 4898.0], [69.2, 4909.0], [69.3, 4925.0], [69.4, 4956.0], [69.5, 4975.0], [69.6, 4980.0], [69.7, 4983.0], [69.8, 4997.0], [69.9, 5012.0], [70.0, 5024.0], [70.1, 5062.0], [70.2, 5074.0], [70.3, 5088.0], [70.4, 5107.0], [70.5, 5123.0], [70.6, 5135.0], [70.7, 5138.0], [70.8, 5151.0], [70.9, 5168.0], [71.0, 5203.0], [71.1, 5206.0], [71.2, 5234.0], [71.3, 5264.0], [71.4, 5270.0], [71.5, 5287.0], [71.6, 5311.0], [71.7, 5339.0], [71.8, 5349.0], [71.9, 5365.0], [72.0, 5378.0], [72.1, 5388.0], [72.2, 5420.0], [72.3, 5430.0], [72.4, 5444.0], [72.5, 5466.0], [72.6, 5503.0], [72.7, 5518.0], [72.8, 5537.0], [72.9, 5544.0], [73.0, 5582.0], [73.1, 5599.0], [73.2, 5626.0], [73.3, 5627.0], [73.4, 5636.0], [73.5, 5663.0], [73.6, 5692.0], [73.7, 5699.0], [73.8, 5706.0], [73.9, 5737.0], [74.0, 5759.0], [74.1, 5797.0], [74.2, 5813.0], [74.3, 5846.0], [74.4, 5863.0], [74.5, 5900.0], [74.6, 5923.0], [74.7, 5938.0], [74.8, 5955.0], [74.9, 5977.0], [75.0, 5993.0], [75.1, 6007.0], [75.2, 6026.0], [75.3, 6059.0], [75.4, 6081.0], [75.5, 6140.0], [75.6, 6208.0], [75.7, 6217.0], [75.8, 6254.0], [75.9, 6296.0], [76.0, 6319.0], [76.1, 6363.0], [76.2, 6374.0], [76.3, 6382.0], [76.4, 6409.0], [76.5, 6515.0], [76.6, 6563.0], [76.7, 6590.0], [76.8, 6624.0], [76.9, 6632.0], [77.0, 6665.0], [77.1, 6691.0], [77.2, 6725.0], [77.3, 6776.0], [77.4, 6790.0], [77.5, 6810.0], [77.6, 6862.0], [77.7, 6878.0], [77.8, 6929.0], [77.9, 6996.0], [78.0, 7060.0], [78.1, 7117.0], [78.2, 7127.0], [78.3, 7151.0], [78.4, 7232.0], [78.5, 7310.0], [78.6, 7316.0], [78.7, 7322.0], [78.8, 7331.0], [78.9, 7350.0], [79.0, 7363.0], [79.1, 7378.0], [79.2, 7426.0], [79.3, 7476.0], [79.4, 7506.0], [79.5, 7508.0], [79.6, 7517.0], [79.7, 7536.0], [79.8, 7553.0], [79.9, 7589.0], [80.0, 7606.0], [80.1, 7643.0], [80.2, 7659.0], [80.3, 7675.0], [80.4, 7716.0], [80.5, 7757.0], [80.6, 7782.0], [80.7, 7809.0], [80.8, 7842.0], [80.9, 7844.0], [81.0, 7910.0], [81.1, 7961.0], [81.2, 7968.0], [81.3, 7983.0], [81.4, 8016.0], [81.5, 8031.0], [81.6, 8061.0], [81.7, 8124.0], [81.8, 8141.0], [81.9, 8228.0], [82.0, 8270.0], [82.1, 8301.0], [82.2, 8373.0], [82.3, 8384.0], [82.4, 8415.0], [82.5, 8443.0], [82.6, 8492.0], [82.7, 8662.0], [82.8, 8726.0], [82.9, 8808.0], [83.0, 8828.0], [83.1, 8887.0], [83.2, 8903.0], [83.3, 8938.0], [83.4, 9018.0], [83.5, 9030.0], [83.6, 9062.0], [83.7, 9072.0], [83.8, 9114.0], [83.9, 9134.0], [84.0, 9210.0], [84.1, 9217.0], [84.2, 9244.0], [84.3, 9303.0], [84.4, 9338.0], [84.5, 9387.0], [84.6, 9399.0], [84.7, 9535.0], [84.8, 9587.0], [84.9, 9656.0], [85.0, 9669.0], [85.1, 9707.0], [85.2, 9722.0], [85.3, 9776.0], [85.4, 9802.0], [85.5, 9835.0], [85.6, 9859.0], [85.7, 9867.0], [85.8, 9966.0], [85.9, 9988.0], [86.0, 10018.0], [86.1, 10076.0], [86.2, 10106.0], [86.3, 10120.0], [86.4, 10230.0], [86.5, 10273.0], [86.6, 10310.0], [86.7, 10367.0], [86.8, 10461.0], [86.9, 10667.0], [87.0, 10801.0], [87.1, 10858.0], [87.2, 10942.0], [87.3, 11190.0], [87.4, 11276.0], [87.5, 11317.0], [87.6, 11482.0], [87.7, 11615.0], [87.8, 11634.0], [87.9, 11748.0], [88.0, 11898.0], [88.1, 11954.0], [88.2, 12044.0], [88.3, 12256.0], [88.4, 12347.0], [88.5, 12495.0], [88.6, 12626.0], [88.7, 12677.0], [88.8, 12782.0], [88.9, 12917.0], [89.0, 13005.0], [89.1, 13207.0], [89.2, 13669.0], [89.3, 13827.0], [89.4, 13940.0], [89.5, 13994.0], [89.6, 14080.0], [89.7, 14224.0], [89.8, 14351.0], [89.9, 14615.0], [90.0, 14629.0], [90.1, 14654.0], [90.2, 14944.0], [90.3, 15044.0], [90.4, 15078.0], [90.5, 15081.0], [90.6, 15154.0], [90.7, 15335.0], [90.8, 15436.0], [90.9, 15546.0], [91.0, 15820.0], [91.1, 16090.0], [91.2, 16151.0], [91.3, 16295.0], [91.4, 16724.0], [91.5, 16980.0], [91.6, 17168.0], [91.7, 17404.0], [91.8, 17445.0], [91.9, 17663.0], [92.0, 17942.0], [92.1, 18156.0], [92.2, 18404.0], [92.3, 18736.0], [92.4, 19158.0], [92.5, 19540.0], [92.6, 19753.0], [92.7, 20220.0], [92.8, 20409.0], [92.9, 21137.0], [93.0, 21404.0], [93.1, 21542.0], [93.2, 21667.0], [93.3, 22753.0], [93.4, 23228.0], [93.5, 23435.0], [93.6, 23765.0], [93.7, 23995.0], [93.8, 24089.0], [93.9, 24503.0], [94.0, 24886.0], [94.1, 25090.0], [94.2, 25499.0], [94.3, 25630.0], [94.4, 26028.0], [94.5, 26313.0], [94.6, 27297.0], [94.7, 28815.0], [94.8, 29637.0], [94.9, 36603.0], [95.0, 36803.0], [95.1, 37178.0], [95.2, 38410.0], [95.3, 40099.0], [95.4, 41581.0], [95.5, 44128.0], [95.6, 46261.0], [95.7, 49614.0], [95.8, 57514.0], [95.9, 65978.0], [96.0, 69546.0], [96.1, 70629.0], [96.2, 75009.0], [96.3, 81088.0], [96.4, 85063.0], [96.5, 89112.0], [96.6, 90686.0], [96.7, 99906.0], [96.8, 121281.0], [96.9, 143067.0], [97.0, 150900.0], [97.1, 155799.0], [97.2, 160205.0], [97.3, 164559.0], [97.4, 167278.0], [97.5, 169339.0], [97.6, 173094.0], [97.7, 174723.0], [97.8, 186509.0], [97.9, 224623.0], [98.0, 271927.0], [98.1, 275953.0], [98.2, 285243.0], [98.3, 296105.0], [98.4, 302952.0], [98.5, 1.4087532E7], [98.6, 1.4122591E7], [98.7, 1.4164733E7], [98.8, 1.4169819E7], [98.9, 1.4173744E7], [99.0, 1.4200156E7], [99.1, 1.4208334E7], [99.2, 1.4209466E7], [99.3, 1.4211148E7], [99.4, 1.4237569E7], [99.5, 1.423991E7], [99.6, 1.4244126E7], [99.7, 1.4247067E7], [99.8, 1.4249319E7], [99.9, 1.4249833E7]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 233.0, "series": [{"data": [[69900.0, 1.0], [78700.0, 1.0], [93100.0, 1.0], [151400.0, 1.0], [33300.0, 1.0], [35700.0, 1.0], [38500.0, 1.0], [39300.0, 1.0], [42100.0, 1.0], [44100.0, 1.0], [48900.0, 1.0], [54100.0, 1.0], [60900.0, 1.0], [83400.0, 1.0], [400.0, 233.0], [500.0, 232.0], [600.0, 135.0], [700.0, 62.0], [800.0, 32.0], [900.0, 40.0], [1000.0, 31.0], [1100.0, 42.0], [1200.0, 41.0], [1300.0, 31.0], [1400.0, 37.0], [1500.0, 31.0], [1600.0, 34.0], [1700.0, 32.0], [1800.0, 28.0], [1900.0, 28.0], [2000.0, 22.0], [2100.0, 23.0], [2300.0, 30.0], [2200.0, 29.0], [2400.0, 25.0], [2500.0, 25.0], [2600.0, 24.0], [2800.0, 25.0], [2700.0, 22.0], [2900.0, 13.0], [3000.0, 20.0], [3100.0, 15.0], [3300.0, 20.0], [3200.0, 15.0], [3400.0, 16.0], [3500.0, 11.0], [3600.0, 15.0], [3700.0, 12.0], [3800.0, 15.0], [3900.0, 11.0], [4000.0, 11.0], [4200.0, 10.0], [4100.0, 13.0], [4300.0, 5.0], [65700.0, 1.0], [4400.0, 6.0], [4600.0, 9.0], [4500.0, 6.0], [4800.0, 7.0], [4700.0, 4.0], [4900.0, 5.0], [5000.0, 8.0], [5100.0, 1.0], [5200.0, 6.0], [5300.0, 4.0], [5500.0, 10.0], [5400.0, 3.0], [5600.0, 6.0], [5800.0, 4.0], [5700.0, 6.0], [6000.0, 5.0], [6100.0, 5.0], [5900.0, 4.0], [96100.0, 1.0], [6300.0, 5.0], [6200.0, 4.0], [6600.0, 4.0], [6400.0, 3.0], [6500.0, 2.0], [6800.0, 7.0], [6900.0, 6.0], [6700.0, 1.0], [7000.0, 5.0], [7100.0, 1.0], [7300.0, 3.0], [7200.0, 4.0], [7400.0, 5.0], [7500.0, 7.0], [7800.0, 2.0], [7700.0, 1.0], [7900.0, 2.0], [8000.0, 5.0], [8100.0, 1.0], [8400.0, 3.0], [8700.0, 1.0], [8200.0, 1.0], [8300.0, 2.0], [8600.0, 2.0], [8500.0, 1.0], [137400.0, 1.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 1.0], [8800.0, 2.0], [9300.0, 1.0], [10100.0, 1.0], [9900.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10300.0, 2.0], [10400.0, 2.0], [10700.0, 2.0], [11200.0, 2.0], [10800.0, 1.0], [11100.0, 1.0], [10900.0, 2.0], [11000.0, 1.0], [179000.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [11700.0, 2.0], [11500.0, 4.0], [11400.0, 1.0], [12200.0, 2.0], [11900.0, 2.0], [11800.0, 1.0], [12000.0, 2.0], [12500.0, 2.0], [12700.0, 2.0], [12600.0, 3.0], [13200.0, 1.0], [12800.0, 1.0], [13600.0, 2.0], [13400.0, 1.0], [13500.0, 3.0], [14000.0, 2.0], [14200.0, 1.0], [13900.0, 2.0], [14300.0, 1.0], [14500.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [17200.0, 1.0], [18200.0, 3.0], [17800.0, 1.0], [17600.0, 1.0], [287600.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [20400.0, 2.0], [19600.0, 1.0], [20200.0, 3.0], [19800.0, 1.0], [20800.0, 1.0], [20600.0, 1.0], [21000.0, 2.0], [21400.0, 2.0], [22400.0, 2.0], [22200.0, 1.0], [21600.0, 1.0], [22000.0, 1.0], [23200.0, 2.0], [22800.0, 2.0], [25400.0, 1.0], [25600.0, 1.0], [26200.0, 1.0], [28000.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [32600.0, 1.0], [34400.0, 1.0], [37600.0, 1.0], [42400.0, 1.0], [64400.0, 1.0], [65200.0, 1.0], [64800.0, 1.0], [283000.0, 1.0], [83200.0, 1.0], [87200.0, 1.0], [86400.0, 1.0], [90400.0, 1.0], [151300.0, 1.0], [98300.0, 1.0], [317200.0, 1.0], [34300.0, 1.0], [37500.0, 1.0], [38700.0, 1.0], [39100.0, 1.0], [45100.0, 1.0], [49100.0, 1.0], [72600.0, 1.0], [83000.0, 1.0], [182800.0, 1.0], [95700.0, 1.0], [130900.0, 1.0], [168600.0, 1.0], [17900.0, 1.0], [19100.0, 3.0], [18900.0, 1.0], [19300.0, 1.0], [20300.0, 1.0], [19500.0, 1.0], [19900.0, 1.0], [20500.0, 3.0], [21100.0, 1.0], [20700.0, 1.0], [22100.0, 3.0], [22500.0, 2.0], [21900.0, 1.0], [23300.0, 1.0], [23100.0, 1.0], [25500.0, 2.0], [26300.0, 1.0], [26100.0, 2.0], [26700.0, 1.0], [27100.0, 1.0], [28100.0, 1.0], [29100.0, 1.0], [30300.0, 1.0], [29900.0, 1.0], [31100.0, 1.0], [32100.0, 2.0], [32500.0, 1.0], [33800.0, 1.0], [35000.0, 1.0], [295100.0, 1.0], [40600.0, 1.0], [84400.0, 1.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[167200.0, 1.0], [1.4089E7, 1.0], [176100.0, 1.0], [65900.0, 1.0], [1.41995E7, 1.0], [89100.0, 1.0], [100300.0, 1.0], [145000.0, 1.0], [297300.0, 1.0], [161000.0, 1.0], [1.42483E7, 1.0], [1.42441E7, 2.0], [274000.0, 1.0], [267100.0, 1.0], [40900.0, 1.0], [44100.0, 1.0], [174700.0, 1.0], [1.42111E7, 1.0], [217900.0, 1.0], [70600.0, 1.0], [74600.0, 1.0], [76200.0, 1.0], [81000.0, 1.0], [85000.0, 1.0], [87400.0, 1.0], [90600.0, 2.0], [1.42399E7, 1.0], [1.4244E7, 1.0], [600.0, 69.0], [1.42498E7, 1.0], [700.0, 148.0], [800.0, 141.0], [900.0, 116.0], [1.42375E7, 1.0], [1.41269E7, 1.0], [1000.0, 74.0], [1.42129E7, 1.0], [1100.0, 78.0], [284000.0, 1.0], [1200.0, 44.0], [1300.0, 45.0], [1400.0, 28.0], [1500.0, 31.0], [1600.0, 33.0], [1700.0, 30.0], [1800.0, 34.0], [1900.0, 31.0], [2000.0, 25.0], [1.42376E7, 1.0], [2100.0, 29.0], [2300.0, 27.0], [2200.0, 21.0], [1.42004E7, 1.0], [2400.0, 25.0], [150900.0, 1.0], [2500.0, 17.0], [155700.0, 1.0], [2600.0, 16.0], [2800.0, 19.0], [2700.0, 15.0], [347500.0, 1.0], [2900.0, 22.0], [3000.0, 20.0], [3100.0, 20.0], [3200.0, 21.0], [3300.0, 20.0], [3400.0, 22.0], [1.41225E7, 1.0], [3500.0, 11.0], [3700.0, 20.0], [3600.0, 19.0], [3800.0, 12.0], [3900.0, 18.0], [4000.0, 14.0], [4100.0, 11.0], [4200.0, 13.0], [4300.0, 13.0], [4400.0, 11.0], [4500.0, 15.0], [4600.0, 20.0], [70500.0, 1.0], [4700.0, 13.0], [4800.0, 16.0], [5100.0, 13.0], [4900.0, 15.0], [5000.0, 11.0], [5300.0, 12.0], [5200.0, 11.0], [5500.0, 11.0], [5400.0, 10.0], [5600.0, 12.0], [5700.0, 9.0], [5800.0, 7.0], [5900.0, 11.0], [6000.0, 9.0], [6100.0, 3.0], [6200.0, 7.0], [6300.0, 8.0], [6500.0, 6.0], [6600.0, 9.0], [6400.0, 2.0], [6700.0, 7.0], [6800.0, 6.0], [6900.0, 3.0], [7100.0, 6.0], [7000.0, 2.0], [7200.0, 4.0], [7300.0, 13.0], [7400.0, 5.0], [7500.0, 13.0], [7600.0, 8.0], [7700.0, 6.0], [7800.0, 6.0], [7900.0, 8.0], [8000.0, 7.0], [8100.0, 3.0], [8200.0, 5.0], [8400.0, 5.0], [8600.0, 2.0], [8700.0, 2.0], [8300.0, 6.0], [8500.0, 1.0], [8800.0, 7.0], [9000.0, 9.0], [9100.0, 4.0], [9200.0, 6.0], [8900.0, 3.0], [1.42493E7, 1.0], [9300.0, 7.0], [9400.0, 2.0], [9500.0, 3.0], [9600.0, 5.0], [9700.0, 5.0], [9800.0, 8.0], [9900.0, 5.0], [10000.0, 5.0], [10100.0, 4.0], [10200.0, 3.0], [10300.0, 5.0], [10600.0, 2.0], [10500.0, 1.0], [10400.0, 1.0], [10900.0, 1.0], [11100.0, 1.0], [11200.0, 3.0], [10800.0, 4.0], [11000.0, 1.0], [11600.0, 3.0], [11400.0, 2.0], [11500.0, 2.0], [11700.0, 2.0], [11300.0, 1.0], [11900.0, 2.0], [12200.0, 2.0], [11800.0, 2.0], [12100.0, 1.0], [12000.0, 2.0], [12600.0, 4.0], [12300.0, 2.0], [12500.0, 1.0], [12400.0, 1.0], [12700.0, 1.0], [1.42902E7, 1.0], [13200.0, 1.0], [13000.0, 2.0], [12900.0, 2.0], [12800.0, 1.0], [13400.0, 1.0], [13700.0, 2.0], [13800.0, 1.0], [13600.0, 1.0], [14200.0, 2.0], [14000.0, 2.0], [14100.0, 1.0], [13900.0, 4.0], [14300.0, 1.0], [14600.0, 7.0], [15300.0, 3.0], [14900.0, 1.0], [15000.0, 7.0], [15100.0, 1.0], [15200.0, 1.0], [15500.0, 2.0], [15700.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [1.42083E7, 1.0], [16100.0, 3.0], [16000.0, 1.0], [16200.0, 1.0], [15900.0, 1.0], [1.42001E7, 1.0], [17400.0, 4.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 1.0], [18400.0, 2.0], [18800.0, 1.0], [20200.0, 2.0], [20400.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [21600.0, 1.0], [23200.0, 1.0], [23400.0, 2.0], [24000.0, 2.0], [24400.0, 1.0], [23600.0, 1.0], [25400.0, 1.0], [25000.0, 1.0], [24800.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [27200.0, 2.0], [28800.0, 2.0], [29600.0, 1.0], [1.42494E7, 1.0], [34800.0, 1.0], [36800.0, 2.0], [144700.0, 1.0], [38000.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [41200.0, 1.0], [47600.0, 1.0], [49600.0, 1.0], [174400.0, 1.0], [1.4169E7, 1.0], [157700.0, 1.0], [186500.0, 1.0], [69500.0, 1.0], [1.41647E7, 1.0], [99900.0, 1.0], [155400.0, 1.0], [160200.0, 1.0], [1.42094E7, 1.0], [173000.0, 1.0], [1.42095E7, 1.0], [285200.0, 1.0], [271900.0, 1.0], [294300.0, 1.0], [37100.0, 1.0], [1.42091E7, 1.0], [39500.0, 1.0], [41500.0, 1.0], [170700.0, 1.0], [44700.0, 1.0], [51500.0, 1.0], [57500.0, 1.0], [65100.0, 1.0], [75000.0, 1.0], [97400.0, 1.0], [124600.0, 1.0], [296100.0, 1.0], [398500.0, 1.0], [1.41701E7, 1.0], [164500.0, 2.0], [169300.0, 1.0], [1.41737E7, 1.0], [1.41698E7, 1.0], [84500.0, 1.0], [143000.0, 1.0], [302900.0, 1.0], [1.40875E7, 1.0], [224600.0, 1.0], [16900.0, 1.0], [17100.0, 2.0], [16500.0, 1.0], [16700.0, 1.0], [18100.0, 3.0], [17900.0, 2.0], [19100.0, 1.0], [19300.0, 1.0], [18700.0, 2.0], [19500.0, 1.0], [19700.0, 3.0], [21500.0, 3.0], [21100.0, 1.0], [22300.0, 1.0], [22700.0, 1.0], [23100.0, 1.0], [24300.0, 1.0], [23700.0, 2.0], [24500.0, 1.0], [23900.0, 1.0], [24900.0, 1.0], [25500.0, 1.0], [24700.0, 1.0], [25100.0, 1.0], [26300.0, 1.0], [25700.0, 1.0], [26100.0, 1.0], [27500.0, 1.0], [275900.0, 1.0], [1.4247E7, 1.0], [36600.0, 2.0], [42600.0, 1.0], [167900.0, 1.0], [46200.0, 1.0], [69200.0, 1.0], [1.42512E7, 1.0], [121200.0, 1.0]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.42902E7, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2222.0, "series": [{"data": [[0.0, 235.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1425.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2222.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 48.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.695336E12, "maxY": 300.0, "series": [{"data": [[1.69533606E12, 98.75409836065577], [1.69533666E12, 300.0], [1.695336E12, 48.15789473684209], [1.69533696E12, 32.5], [1.69533678E12, 151.74041297935096], [1.69533612E12, 128.35384615384623], [1.69533672E12, 274.6942567567567], [1.69533654E12, 183.31877729257633], [1.69533684E12, 46.0], [1.69533618E12, 91.09631728045325], [1.69533648E12, 95.78947368421052], [1.6953363E12, 3.0], [1.6953366E12, 287.3534482758622], [1.6953369E12, 34.5], [1.69533624E12, 37.31250000000002], [1.69535082E12, 18.0]], "isOverall": false, "label": "Stress Testing ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69535082E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 453.0, "minX": 1.0, "maxY": 1.42639065E7, "series": [{"data": [[7.0, 1200.0], [8.0, 484.0], [9.0, 1181.0], [10.0, 488.0], [11.0, 547.8333333333333], [16.0, 580.0], [17.0, 848.0], [18.0, 781.0], [19.0, 494.0], [21.0, 548.0], [22.0, 1242.0], [23.0, 470.0], [24.0, 4273.0], [25.0, 496.0], [29.0, 522.0], [31.0, 476.0], [32.0, 468.0], [35.0, 617.3333333333334], [34.0, 460.0], [38.0, 148173.5], [40.0, 476.0], [41.0, 144040.0], [43.0, 141786.0], [42.0, 473.0], [45.0, 21668.399999999998], [44.0, 564.5454545454545], [47.0, 576.2], [46.0, 521.0], [49.0, 455.0], [48.0, 489.0], [50.0, 571.2], [51.0, 471.0], [53.0, 488.62500000000006], [52.0, 551.7142857142857], [55.0, 630.5714285714286], [57.0, 490.5], [56.0, 471.0], [59.0, 75950.0], [60.0, 746.1111111111112], [61.0, 475.0], [63.0, 478.0], [62.0, 490.5], [65.0, 610.8], [67.0, 476.5], [66.0, 493.0], [64.0, 498.0], [70.0, 537.1428571428571], [71.0, 504.6666666666667], [69.0, 598.0], [75.0, 785.7058823529412], [74.0, 473.6363636363636], [73.0, 491.6666666666667], [72.0, 513.0], [79.0, 957.6666666666666], [77.0, 1096.0], [76.0, 475.0], [80.0, 885.4285714285714], [83.0, 632.5714285714284], [82.0, 550.0], [81.0, 543.0], [85.0, 559.0000000000001], [86.0, 701.25], [84.0, 499.0], [90.0, 579.8461538461537], [91.0, 613.0], [89.0, 528.0], [88.0, 647.0], [95.0, 1248.8235294117646], [94.0, 466.6666666666667], [93.0, 506.4], [92.0, 547.6666666666666], [98.0, 734.5], [97.0, 1189.0], [96.0, 1022.8], [100.0, 594.4], [103.0, 521.5], [102.0, 565.0], [101.0, 563.0], [105.0, 578.6428571428572], [107.0, 548.5], [106.0, 548.9375], [104.0, 510.4285714285715], [110.0, 1017.3859649122812], [111.0, 615.0], [109.0, 455.0], [108.0, 467.6666666666667], [115.0, 779.65625], [114.0, 980.0], [113.0, 2285.0], [112.0, 830.5], [119.0, 47070.666666666664], [118.0, 495.0], [117.0, 46831.5], [116.0, 673.25], [120.0, 966.1111111111112], [123.0, 720.5], [122.0, 465.0], [121.0, 655.2], [125.0, 638.1666666666666], [127.0, 575.6666666666666], [126.0, 756.25], [124.0, 537.75], [130.0, 1109.7446808510645], [129.0, 696.25], [128.0, 652.3333333333334], [134.0, 646.0], [133.0, 458.0], [132.0, 459.0], [131.0, 41995.0], [143.0, 465.0], [142.0, 458.0], [140.0, 503.0], [139.0, 555.6666666666666], [136.0, 1611.0], [150.0, 2025.3703703703707], [151.0, 464.0], [149.0, 480.0], [148.0, 83425.0], [145.0, 603.0], [158.0, 689.0], [152.0, 494.0], [167.0, 891.5], [166.0, 2125.0], [165.0, 475.0], [164.0, 765.6], [163.0, 594.5], [162.0, 488.0], [161.0, 601.0], [160.0, 581.0], [170.0, 1990.4999999999998], [175.0, 2429.0], [174.0, 2549.0], [173.0, 51544.333333333336], [172.0, 2265.8], [171.0, 2983.0], [168.0, 1350.5], [183.0, 835.25], [182.0, 1351.0], [181.0, 1713.0], [180.0, 2547.0], [179.0, 2603.0], [178.0, 2097.75], [177.0, 93670.0], [176.0, 1556.0], [190.0, 6298.428571428572], [191.0, 22052.333333333332], [189.0, 526.0], [188.0, 465.0], [187.0, 453.0], [186.0, 541.5], [185.0, 742.0], [184.0, 1425.0], [199.0, 20797.0], [197.0, 750.0], [196.0, 637.5], [195.0, 629.0], [194.0, 4020.5], [193.0, 6514.0], [192.0, 1470.0], [206.0, 14088.0], [204.0, 22012.0], [203.0, 2420.428571428571], [202.0, 549.0], [201.0, 17977.0], [200.0, 20293.0], [210.0, 3006.1857142857143], [215.0, 9339.0], [214.0, 66049.5], [212.0, 658.0], [211.0, 19304.0], [209.0, 11620.5], [223.0, 168640.0], [222.0, 11100.5], [221.0, 1876.6666666666667], [220.0, 179080.0], [219.0, 642.0], [218.0, 662.5], [230.0, 3895.610169491525], [231.0, 2124.0], [229.0, 1514.0], [228.0, 3486.5], [227.0, 19196.0], [226.0, 4560.5], [225.0, 1236.3333333333333], [224.0, 22907.5], [239.0, 3456.0], [237.0, 5037.666666666667], [236.0, 6453.0], [235.0, 2896.0], [233.0, 6072.0], [232.0, 7146.0], [245.0, 12609.0], [244.0, 6884.5], [242.0, 12862.0], [241.0, 6338.0], [240.0, 1770.0], [250.0, 4725.333333333334], [255.0, 3376.1666666666665], [253.0, 15051.0], [252.0, 4749.0], [251.0, 3956.5], [249.0, 2255.0], [248.0, 2059.0], [269.0, 1828.0], [270.0, 6867.3076923076915], [268.0, 6184.888888888888], [259.0, 2594.0], [258.0, 2356.5], [257.0, 3720.0], [256.0, 2449.0], [267.0, 1866.5], [266.0, 29445.333333333336], [265.0, 3077.6666666666665], [264.0, 2856.2], [263.0, 2516.75], [261.0, 3906.0], [260.0, 3927.5], [287.0, 2353.5], [282.0, 9490.0], [286.0, 7779.000000000001], [285.0, 20292.0], [284.0, 1971.0], [275.0, 1057.3333333333333], [274.0, 16923.0], [273.0, 1562.0], [283.0, 3464.9166666666665], [281.0, 1756.0], [280.0, 39844.0], [279.0, 8764.75], [278.0, 11803.166666666668], [277.0, 35001.0], [276.0, 24664.666666666668], [300.0, 8163.024590163938], [290.0, 6378.377777777775], [289.0, 6979.684210526316], [288.0, 24818.0], [291.0, 4505.0], [299.0, 15129.555555555555], [298.0, 3287.8], [297.0, 11271.5], [296.0, 24361.2], [295.0, 7011.25], [294.0, 2538.0], [293.0, 10261.2], [292.0, 6130.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[195.24611260053643, 5586.427882037536]], "isOverall": false, "label": " Career-Aggregated", "isController": false}, {"data": [[2.0, 739.0], [3.0, 7100206.0], [4.0, 9432606.666666666], [5.0, 7123893.0], [6.0, 701.0], [7.0, 1.4211148E7], [8.0, 1.4200476E7], [11.0, 1.4169819E7], [12.0, 7125076.0], [13.0, 1483.0], [14.0, 769.0], [15.0, 1.1836353E7], [17.0, 1.4209179333333334E7], [18.0, 1.4249833E7], [20.0, 9471299.666666666], [21.0, 1.4212964E7], [22.0, 1.4122591E7], [23.0, 1.4209137E7], [25.0, 2029037.5714285714], [26.0, 3552750.5], [27.0, 7119265.0], [28.0, 986.0], [29.0, 1.42639065E7], [30.0, 1305.7142857142856], [31.0, 1.4195995666666666E7], [33.0, 174099.0], [32.0, 398514.0], [35.0, 22027.357142857145], [34.0, 55050.2], [37.0, 147641.0], [36.0, 148450.5], [39.0, 143192.5], [40.0, 36373.375], [41.0, 687.0], [42.0, 275953.0], [45.0, 1003.0], [44.0, 45225.333333333336], [47.0, 101490.33333333333], [46.0, 224623.0], [49.0, 173094.0], [48.0, 167945.0], [50.0, 39965.428571428565], [51.0, 83977.5], [53.0, 27262.666666666664], [52.0, 32205.6], [55.0, 28243.166666666668], [54.0, 85003.5], [56.0, 772.6666666666666], [58.0, 911.5], [60.0, 1178.2105263157894], [61.0, 721.0], [63.0, 736.0], [62.0, 742.8888888888889], [65.0, 996.2857142857141], [67.0, 843.0], [64.0, 217974.0], [70.0, 878.6], [71.0, 810.6666666666666], [69.0, 863.75], [68.0, 997.0], [75.0, 1050.076923076923], [74.0, 737.5714285714286], [73.0, 654.5], [72.0, 841.0], [78.0, 873.5], [77.0, 1545.0], [76.0, 1735.0], [80.0, 1085.2857142857144], [83.0, 821.5555555555555], [82.0, 968.0], [81.0, 765.0], [85.0, 892.4166666666666], [87.0, 918.0], [86.0, 830.5], [84.0, 991.0], [90.0, 7120.907692307693], [91.0, 750.0], [89.0, 788.3333333333334], [88.0, 899.0], [95.0, 1338.6857142857139], [94.0, 767.25], [93.0, 777.5], [92.0, 729.75], [99.0, 1158.5], [98.0, 1623.0], [97.0, 1938.8333333333333], [96.0, 1991.6666666666667], [100.0, 941.5882352941178], [103.0, 752.0], [101.0, 948.5], [105.0, 1015.9], [106.0, 831.0588235294117], [104.0, 755.2857142857142], [110.0, 2541.6800000000003], [111.0, 1205.5], [108.0, 738.3333333333334], [115.0, 1148.24], [114.0, 1435.0], [113.0, 722.0], [112.0, 738.0], [116.0, 941.0], [119.0, 834.0], [118.0, 855.0], [120.0, 1285.7058823529412], [123.0, 1127.3333333333335], [121.0, 726.0], [122.0, 1981.0], [125.0, 1086.7222222222224], [127.0, 1010.5], [126.0, 1060.8], [124.0, 914.6], [130.0, 1490.3266331658301], [129.0, 1109.0], [135.0, 785.0], [134.0, 676.0], [131.0, 924.0], [128.0, 1220.0], [141.0, 155799.0], [139.0, 804.0], [138.0, 750.0], [137.0, 170746.0], [136.0, 689.0], [150.0, 4785.300000000001], [151.0, 23239.25], [149.0, 720.0], [147.0, 830.0], [146.0, 777.0], [145.0, 753.0], [144.0, 759.0], [159.0, 1229.0], [158.0, 1484.8], [157.0, 30012.0], [156.0, 161099.0], [155.0, 41876.5], [154.0, 872.0], [153.0, 82742.0], [152.0, 38265.75], [167.0, 1946.6666666666667], [164.0, 875.6666666666666], [162.0, 841.3333333333334], [170.0, 6121.780821917807], [175.0, 2653.0], [174.0, 2423.3333333333335], [172.0, 1924.75], [171.0, 2353.0], [169.0, 144735.0], [183.0, 1281.0], [182.0, 1272.0], [181.0, 1887.1666666666667], [180.0, 1897.5], [178.0, 2474.3333333333335], [176.0, 1995.0], [190.0, 6745.096153846152], [189.0, 186509.0], [188.0, 758.0], [187.0, 675.0], [185.0, 978.0], [184.0, 1376.0], [198.0, 80380.5], [197.0, 19753.0], [196.0, 1095.2], [194.0, 1116.5], [193.0, 974.0], [192.0, 719.0], [207.0, 879.0], [205.0, 176172.0], [204.0, 6876.5], [203.0, 7368.333333333334], [210.0, 6670.416666666667], [215.0, 11634.0], [213.0, 944.0], [212.0, 1146.75], [211.0, 10667.0], [209.0, 13669.0], [208.0, 864.0], [223.0, 1454.0], [222.0, 4468.8], [221.0, 2010.75], [217.0, 2250.5], [216.0, 4431.0], [230.0, 7122.411764705882], [231.0, 8116.5], [229.0, 46893.75], [228.0, 7510.666666666666], [226.0, 6609.0], [225.0, 5900.0], [224.0, 46020.0], [238.0, 89112.0], [237.0, 3434.0], [235.0, 5052.0], [234.0, 3564.75], [232.0, 4567.0], [247.0, 6356.5], [246.0, 2872.0], [244.0, 2647.0], [243.0, 3079.0], [241.0, 4975.0], [240.0, 3162.0], [250.0, 6508.450000000002], [255.0, 5826.75], [254.0, 15064.499999999998], [253.0, 4404.25], [252.0, 3029.0], [251.0, 7983.0], [248.0, 9268.5], [270.0, 7574.270833333334], [271.0, 1713.0], [269.0, 1825.3333333333333], [268.0, 47221.33333333333], [267.0, 2102.0], [266.0, 2470.0], [264.0, 4507.75], [263.0, 3160.0], [258.0, 3327.6], [256.0, 3158.0], [262.0, 5123.0], [286.0, 11644.5], [287.0, 1220.0], [284.0, 23435.0], [275.0, 936.0], [273.0, 1465.5], [272.0, 1479.0], [283.0, 5825.857142857143], [282.0, 26176.2], [281.0, 2050.0], [280.0, 1111.0], [279.0, 1822.857142857143], [278.0, 37393.0], [276.0, 1128.0], [300.0, 9608.172199170125], [290.0, 10747.082191780819], [289.0, 4476.6875], [288.0, 1451.6666666666667], [291.0, 3244.3333333333335], [299.0, 5993.777777777777], [298.0, 6069.0], [297.0, 3664.0], [296.0, 4853.0], [295.0, 15734.666666666666], [294.0, 12658.0], [293.0, 5608.5], [292.0, 5226.166666666667], [1.0, 922.0]], "isOverall": false, "label": "About Us", "isController": false}, {"data": [[187.6024213075062, 222032.1447941888]], "isOverall": false, "label": "About Us-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.695336E12, "maxY": 547680.85, "series": [{"data": [[1.69533606E12, 283234.0], [1.69533666E12, 547680.85], [1.695336E12, 93458.18333333333], [1.69533696E12, 2185.5666666666666], [1.69533678E12, 308283.9], [1.69533612E12, 420565.85], [1.69533672E12, 542272.2333333333], [1.69533654E12, 418304.56666666665], [1.69533684E12, 21567.35], [1.69533618E12, 323259.7833333333], [1.69533648E12, 83052.86666666667], [1.6953363E12, 5464.183333333333], [1.6953366E12, 432695.38333333336], [1.6953369E12, 2185.616666666667], [1.69533624E12, 115018.35], [1.69535082E12, 1709.1166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69533606E12, 4817.916666666667], [1.69533666E12, 9607.666666666666], [1.695336E12, 1323.75], [1.69533696E12, 20.5], [1.69533678E12, 5529.5], [1.69533612E12, 7253.75], [1.69533672E12, 9454.25], [1.69533654E12, 7414.266666666666], [1.69533684E12, 261.9166666666667], [1.69533618E12, 5729.916666666667], [1.69533648E12, 779.0], [1.6953363E12, 51.25], [1.6953366E12, 6957.883333333333], [1.6953369E12, 20.5], [1.69533624E12, 2152.0], [1.69535082E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69535082E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 628.9861111111111, "minX": 1.695336E12, "maxY": 1.420539890322581E7, "series": [{"data": [[1.69533606E12, 695.6413793103451], [1.69533654E12, 2881.817021276596], [1.69533684E12, 295771.75], [1.69533618E12, 806.7624309392262], [1.69533666E12, 8303.013114754098], [1.695336E12, 641.2666666666668], [1.69533678E12, 7312.180790960454], [1.69533612E12, 951.968468468469], [1.6953366E12, 6947.83756345178], [1.69533624E12, 628.9861111111111], [1.69533672E12, 9563.033670033667]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69533606E12, 1072.1937499999997], [1.69533666E12, 10189.775919732441], [1.695336E12, 1375.5538461538456], [1.69533696E12, 373010.0], [1.69533678E12, 14540.987654320994], [1.69533612E12, 1394.5965665236042], [1.69533672E12, 8387.311864406784], [1.69533654E12, 6312.793721973092], [1.69533684E12, 215613.0588235294], [1.69533618E12, 1135.3488372093022], [1.69533648E12, 7069.065789473681], [1.6953363E12, 781.0], [1.6953366E12, 9350.779026217235], [1.6953369E12, 284641.5], [1.69533624E12, 801.7857142857142], [1.69535082E12, 1.420539890322581E7]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69535082E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.695336E12, "maxY": 118716.5, "series": [{"data": [[1.69533606E12, 568.2000000000004], [1.69533654E12, 1453.7021276595754], [1.69533684E12, 12556.25], [1.69533618E12, 544.6961325966851], [1.69533666E12, 1782.524590163935], [1.695336E12, 543.3333333333335], [1.69533678E12, 1481.4237288135596], [1.69533612E12, 626.7747747747752], [1.6953366E12, 2346.903553299493], [1.69533624E12, 538.861111111111], [1.69533672E12, 2284.242424242425]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69533606E12, 730.7812500000003], [1.69533666E12, 2468.361204013375], [1.695336E12, 1035.5846153846155], [1.69533696E12, 118716.5], [1.69533678E12, 2257.9197530864203], [1.69533612E12, 841.9828326180257], [1.69533672E12, 1769.2779661016955], [1.69533654E12, 3148.515695067266], [1.69533684E12, 2442.0588235294117], [1.69533618E12, 685.9883720930233], [1.69533648E12, 4549.78947368421], [1.6953363E12, 491.8], [1.6953366E12, 3266.5056179775274], [1.6953369E12, 6286.5], [1.69533624E12, 504.9821428571427], [1.69535082E12, 0.0]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69535082E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.695336E12, "maxY": 1.420539877419355E7, "series": [{"data": [[1.69533606E12, 0.0], [1.69533654E12, 2.072340425531914], [1.69533684E12, 0.0], [1.69533618E12, 0.0], [1.69533666E12, 130.0622950819673], [1.695336E12, 0.0], [1.69533678E12, 2.372881355932203], [1.69533612E12, 0.0], [1.6953366E12, 15.634517766497462], [1.69533624E12, 0.0], [1.69533672E12, 76.42760942760937]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69533606E12, 84.25625], [1.69533666E12, 1439.1036789297657], [1.695336E12, 213.96923076923082], [1.69533696E12, 5386.0], [1.69533678E12, 393.6049382716051], [1.69533612E12, 177.36909871244634], [1.69533672E12, 872.3932203389824], [1.69533654E12, 1023.7713004484298], [1.69533684E12, 772.8823529411764], [1.69533618E12, 150.48837209302337], [1.69533648E12, 1144.7368421052638], [1.6953363E12, 29.6], [1.6953366E12, 1570.7902621722858], [1.6953369E12, 5402.5], [1.69533624E12, 63.57142857142854], [1.69535082E12, 1.420539877419355E7]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69535082E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 444.0, "minX": 1.695336E12, "maxY": 398514.0, "series": [{"data": [[1.69533606E12, 2182.0], [1.69533666E12, 100324.0], [1.695336E12, 3395.0], [1.69533696E12, 398514.0], [1.69533678E12, 217974.0], [1.69533612E12, 5542.0], [1.69533672E12, 179080.0], [1.69533654E12, 41285.0], [1.69533684E12, 317223.0], [1.69533618E12, 3671.0], [1.69533648E12, 11911.0], [1.6953363E12, 922.0], [1.6953366E12, 65750.0], [1.6953369E12, 297356.0], [1.69533624E12, 4273.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69533606E12, 1407.8000000000006], [1.69533666E12, 22481.200000000004], [1.695336E12, 2251.800000000004], [1.69533696E12, 398514.0], [1.69533678E12, 12973.300000000017], [1.69533612E12, 2104.8], [1.69533672E12, 15534.999999999998], [1.69533654E12, 8839.0], [1.69533684E12, 301582.6], [1.69533618E12, 1825.6000000000008], [1.69533648E12, 9983.9], [1.6953363E12, 922.0], [1.6953366E12, 17182.600000000006], [1.6953369E12, 297356.0], [1.69533624E12, 1013.600000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69533606E12, 1920.8999999999999], [1.69533666E12, 85105.75999999997], [1.695336E12, 3395.0], [1.69533696E12, 398514.0], [1.69533678E12, 180239.4800000001], [1.69533612E12, 3512.1199999999994], [1.69533672E12, 132009.59000000037], [1.69533654E12, 26327.200000000026], [1.69533684E12, 317223.0], [1.69533618E12, 3213.0799999999927], [1.69533648E12, 11911.0], [1.6953363E12, 922.0], [1.6953366E12, 48433.999999999935], [1.6953369E12, 297356.0], [1.69533624E12, 3463.8999999999824]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69533606E12, 1622.4999999999998], [1.69533666E12, 35847.00000000002], [1.695336E12, 3020.3999999999983], [1.69533696E12, 398514.0], [1.69533678E12, 90808.40000000002], [1.69533612E12, 2650.7999999999997], [1.69533672E12, 33706.84999999984], [1.69533654E12, 11237.19999999999], [1.69533684E12, 315795.89999999997], [1.69533618E12, 2285.9], [1.69533648E12, 10326.699999999999], [1.6953363E12, 922.0], [1.6953366E12, 26315.3], [1.6953369E12, 297356.0], [1.69533624E12, 1192.35]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69533606E12, 450.0], [1.69533666E12, 445.0], [1.695336E12, 465.0], [1.69533696E12, 347506.0], [1.69533678E12, 444.0], [1.69533612E12, 445.0], [1.69533672E12, 481.0], [1.69533654E12, 449.0], [1.69533684E12, 710.0], [1.69533618E12, 450.0], [1.69533648E12, 946.0], [1.6953363E12, 712.0], [1.6953366E12, 606.0], [1.6953369E12, 271927.0], [1.69533624E12, 448.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69533606E12, 823.0], [1.69533666E12, 3521.0], [1.695336E12, 986.0], [1.69533696E12, 373010.0], [1.69533678E12, 837.0], [1.69533612E12, 942.0], [1.69533672E12, 3269.0], [1.69533654E12, 3421.0], [1.69533684E12, 274075.0], [1.69533618E12, 741.0], [1.69533648E12, 8075.0], [1.6953363E12, 739.0], [1.6953366E12, 5262.5], [1.6953369E12, 284641.5], [1.69533624E12, 666.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69533696E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 775.5, "minX": 1.0, "maxY": 1.4209576E7, "series": [{"data": [[8.0, 1492.0], [2.0, 775.5], [9.0, 2631.0], [10.0, 2314.5], [11.0, 2458.0], [3.0, 777.0], [12.0, 1956.5], [13.0, 3177.5], [14.0, 3101.5], [15.0, 3898.0], [1.0, 2834.0], [4.0, 789.0], [16.0, 3560.5], [17.0, 3759.0], [18.0, 3289.0], [19.0, 5061.0], [5.0, 817.0], [20.0, 6258.0], [21.0, 2916.0], [22.0, 4085.5], [6.0, 986.0], [7.0, 1087.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 21542.0], [16.0, 19774.5], [8.0, 19753.0], [18.0, 19169.0], [19.0, 19540.0], [10.0, 19258.0], [6.0, 17496.0], [12.0, 16945.0], [13.0, 17275.0], [14.0, 17329.5], [7.0, 16295.0], [31.0, 1.4209576E7]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2167.0, "series": [{"data": [[8.0, 817.0], [2.0, 517.0], [9.0, 1117.5], [10.0, 1101.0], [11.0, 1008.0], [3.0, 520.0], [12.0, 958.0], [13.0, 1207.0], [14.0, 1102.0], [15.0, 1338.0], [1.0, 1314.0], [4.0, 536.0], [16.0, 1431.0], [17.0, 1485.5], [18.0, 1367.0], [19.0, 1699.0], [5.0, 576.0], [20.0, 1761.5], [21.0, 1222.0], [22.0, 2167.0], [6.0, 677.0], [7.0, 665.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0], [16.0, 0.0], [8.0, 0.0], [18.0, 0.0], [19.0, 0.0], [10.0, 0.0], [6.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [7.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.695336E12, "maxY": 9.716666666666667, "series": [{"data": [[1.69533606E12, 5.083333333333333], [1.69533666E12, 9.416666666666666], [1.695336E12, 1.6666666666666667], [1.69533678E12, 4.916666666666667], [1.69533612E12, 7.616666666666666], [1.69533672E12, 9.333333333333334], [1.69533654E12, 8.233333333333333], [1.69533684E12, 0.016666666666666666], [1.69533618E12, 5.816666666666666], [1.69533648E12, 1.5166666666666666], [1.6953363E12, 0.08333333333333333], [1.6953366E12, 9.716666666666667], [1.69533624E12, 2.0833333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69533684E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.695336E12, "maxY": 9.95, "series": [{"data": [[1.69533606E12, 5.083333333333333], [1.69533666E12, 9.95], [1.695336E12, 1.5833333333333333], [1.69533696E12, 0.03333333333333333], [1.69533678E12, 5.633333333333334], [1.69533612E12, 7.583333333333333], [1.69533672E12, 9.833333333333334], [1.69533654E12, 7.616666666666666], [1.69533684E12, 0.35], [1.69533618E12, 5.883333333333334], [1.69533648E12, 1.2666666666666666], [1.6953363E12, 0.08333333333333333], [1.6953366E12, 7.633333333333334], [1.6953369E12, 0.03333333333333333], [1.69533624E12, 2.1333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69533654E12, 0.016666666666666666], [1.69533666E12, 0.11666666666666667], [1.69533678E12, 0.016666666666666666], [1.6953366E12, 0.1], [1.69533672E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.69535082E12, 0.5166666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69535082E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.695336E12, "maxY": 5.066666666666666, "series": [{"data": [[1.69533606E12, 2.6666666666666665], [1.69533666E12, 4.883333333333334], [1.695336E12, 1.0833333333333333], [1.69533696E12, 0.03333333333333333], [1.69533678E12, 2.683333333333333], [1.69533612E12, 3.8833333333333333], [1.69533672E12, 4.883333333333334], [1.69533654E12, 3.7], [1.69533684E12, 0.2833333333333333], [1.69533618E12, 2.8666666666666667], [1.69533648E12, 1.2666666666666666], [1.6953363E12, 0.08333333333333333], [1.6953366E12, 4.35], [1.6953369E12, 0.03333333333333333], [1.69533624E12, 0.9333333333333333]], "isOverall": false, "label": "About Us-success", "isController": false}, {"data": [[1.69533666E12, 0.016666666666666666]], "isOverall": false, "label": " Career-failure", "isController": false}, {"data": [[1.69533606E12, 2.4166666666666665], [1.69533654E12, 3.9166666666666665], [1.69533684E12, 0.06666666666666667], [1.69533618E12, 3.0166666666666666], [1.69533666E12, 5.066666666666666], [1.695336E12, 0.5], [1.69533678E12, 2.95], [1.69533612E12, 3.7], [1.6953366E12, 3.283333333333333], [1.69533624E12, 1.2], [1.69533672E12, 4.95]], "isOverall": false, "label": " Career-success", "isController": false}, {"data": [[1.69533654E12, 0.016666666666666666], [1.69533666E12, 0.1], [1.69533678E12, 0.016666666666666666], [1.6953366E12, 0.1], [1.69535082E12, 0.5166666666666667], [1.69533672E12, 0.03333333333333333]], "isOverall": false, "label": "About Us-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69535082E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.695336E12, "maxY": 9.95, "series": [{"data": [[1.69533606E12, 5.083333333333333], [1.69533666E12, 9.95], [1.695336E12, 1.5833333333333333], [1.69533696E12, 0.03333333333333333], [1.69533678E12, 5.633333333333334], [1.69533612E12, 7.583333333333333], [1.69533672E12, 9.833333333333334], [1.69533654E12, 7.616666666666666], [1.69533684E12, 0.35], [1.69533618E12, 5.883333333333334], [1.69533648E12, 1.2666666666666666], [1.6953363E12, 0.08333333333333333], [1.6953366E12, 7.633333333333334], [1.6953369E12, 0.03333333333333333], [1.69533624E12, 2.1333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69533654E12, 0.016666666666666666], [1.69533666E12, 0.11666666666666667], [1.69533678E12, 0.016666666666666666], [1.6953366E12, 0.1], [1.69535082E12, 0.5166666666666667], [1.69533672E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69535082E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

