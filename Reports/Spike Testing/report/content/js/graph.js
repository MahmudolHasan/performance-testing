/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 447.0, "minX": 0.0, "maxY": 28472.0, "series": [{"data": [[0.0, 447.0], [0.1, 447.0], [0.2, 448.0], [0.3, 450.0], [0.4, 450.0], [0.5, 451.0], [0.6, 451.0], [0.7, 451.0], [0.8, 452.0], [0.9, 452.0], [1.0, 452.0], [1.1, 452.0], [1.2, 452.0], [1.3, 452.0], [1.4, 452.0], [1.5, 452.0], [1.6, 452.0], [1.7, 453.0], [1.8, 453.0], [1.9, 453.0], [2.0, 454.0], [2.1, 454.0], [2.2, 454.0], [2.3, 454.0], [2.4, 454.0], [2.5, 454.0], [2.6, 456.0], [2.7, 456.0], [2.8, 456.0], [2.9, 456.0], [3.0, 456.0], [3.1, 456.0], [3.2, 456.0], [3.3, 456.0], [3.4, 456.0], [3.5, 456.0], [3.6, 456.0], [3.7, 456.0], [3.8, 456.0], [3.9, 456.0], [4.0, 457.0], [4.1, 457.0], [4.2, 457.0], [4.3, 457.0], [4.4, 457.0], [4.5, 457.0], [4.6, 457.0], [4.7, 457.0], [4.8, 457.0], [4.9, 457.0], [5.0, 457.0], [5.1, 457.0], [5.2, 457.0], [5.3, 457.0], [5.4, 457.0], [5.5, 458.0], [5.6, 458.0], [5.7, 458.0], [5.8, 458.0], [5.9, 458.0], [6.0, 459.0], [6.1, 459.0], [6.2, 459.0], [6.3, 459.0], [6.4, 459.0], [6.5, 460.0], [6.6, 460.0], [6.7, 460.0], [6.8, 460.0], [6.9, 460.0], [7.0, 460.0], [7.1, 460.0], [7.2, 460.0], [7.3, 460.0], [7.4, 460.0], [7.5, 460.0], [7.6, 461.0], [7.7, 461.0], [7.8, 461.0], [7.9, 461.0], [8.0, 461.0], [8.1, 461.0], [8.2, 461.0], [8.3, 461.0], [8.4, 461.0], [8.5, 461.0], [8.6, 461.0], [8.7, 461.0], [8.8, 462.0], [8.9, 462.0], [9.0, 462.0], [9.1, 462.0], [9.2, 462.0], [9.3, 463.0], [9.4, 463.0], [9.5, 463.0], [9.6, 463.0], [9.7, 463.0], [9.8, 463.0], [9.9, 463.0], [10.0, 463.0], [10.1, 463.0], [10.2, 464.0], [10.3, 464.0], [10.4, 464.0], [10.5, 464.0], [10.6, 464.0], [10.7, 464.0], [10.8, 464.0], [10.9, 464.0], [11.0, 464.0], [11.1, 464.0], [11.2, 465.0], [11.3, 465.0], [11.4, 465.0], [11.5, 465.0], [11.6, 465.0], [11.7, 465.0], [11.8, 465.0], [11.9, 465.0], [12.0, 465.0], [12.1, 465.0], [12.2, 465.0], [12.3, 465.0], [12.4, 465.0], [12.5, 465.0], [12.6, 465.0], [12.7, 466.0], [12.8, 466.0], [12.9, 466.0], [13.0, 466.0], [13.1, 466.0], [13.2, 466.0], [13.3, 466.0], [13.4, 466.0], [13.5, 466.0], [13.6, 466.0], [13.7, 466.0], [13.8, 466.0], [13.9, 467.0], [14.0, 467.0], [14.1, 467.0], [14.2, 467.0], [14.3, 467.0], [14.4, 467.0], [14.5, 467.0], [14.6, 467.0], [14.7, 467.0], [14.8, 467.0], [14.9, 467.0], [15.0, 468.0], [15.1, 468.0], [15.2, 468.0], [15.3, 468.0], [15.4, 468.0], [15.5, 468.0], [15.6, 468.0], [15.7, 468.0], [15.8, 468.0], [15.9, 468.0], [16.0, 468.0], [16.1, 468.0], [16.2, 468.0], [16.3, 468.0], [16.4, 468.0], [16.5, 468.0], [16.6, 468.0], [16.7, 468.0], [16.8, 468.0], [16.9, 468.0], [17.0, 468.0], [17.1, 469.0], [17.2, 469.0], [17.3, 469.0], [17.4, 469.0], [17.5, 469.0], [17.6, 469.0], [17.7, 469.0], [17.8, 469.0], [17.9, 469.0], [18.0, 469.0], [18.1, 469.0], [18.2, 469.0], [18.3, 469.0], [18.4, 469.0], [18.5, 469.0], [18.6, 469.0], [18.7, 470.0], [18.8, 470.0], [18.9, 470.0], [19.0, 470.0], [19.1, 470.0], [19.2, 470.0], [19.3, 470.0], [19.4, 470.0], [19.5, 470.0], [19.6, 470.0], [19.7, 470.0], [19.8, 470.0], [19.9, 470.0], [20.0, 471.0], [20.1, 471.0], [20.2, 471.0], [20.3, 471.0], [20.4, 471.0], [20.5, 471.0], [20.6, 471.0], [20.7, 471.0], [20.8, 471.0], [20.9, 471.0], [21.0, 471.0], [21.1, 471.0], [21.2, 472.0], [21.3, 472.0], [21.4, 472.0], [21.5, 472.0], [21.6, 472.0], [21.7, 472.0], [21.8, 472.0], [21.9, 472.0], [22.0, 472.0], [22.1, 472.0], [22.2, 473.0], [22.3, 473.0], [22.4, 473.0], [22.5, 473.0], [22.6, 473.0], [22.7, 473.0], [22.8, 473.0], [22.9, 474.0], [23.0, 474.0], [23.1, 474.0], [23.2, 474.0], [23.3, 474.0], [23.4, 475.0], [23.5, 475.0], [23.6, 475.0], [23.7, 475.0], [23.8, 475.0], [23.9, 475.0], [24.0, 475.0], [24.1, 475.0], [24.2, 475.0], [24.3, 475.0], [24.4, 475.0], [24.5, 476.0], [24.6, 476.0], [24.7, 476.0], [24.8, 476.0], [24.9, 476.0], [25.0, 476.0], [25.1, 476.0], [25.2, 476.0], [25.3, 476.0], [25.4, 476.0], [25.5, 477.0], [25.6, 477.0], [25.7, 477.0], [25.8, 477.0], [25.9, 477.0], [26.0, 478.0], [26.1, 478.0], [26.2, 478.0], [26.3, 478.0], [26.4, 478.0], [26.5, 478.0], [26.6, 478.0], [26.7, 478.0], [26.8, 478.0], [26.9, 478.0], [27.0, 478.0], [27.1, 478.0], [27.2, 479.0], [27.3, 479.0], [27.4, 479.0], [27.5, 479.0], [27.6, 479.0], [27.7, 479.0], [27.8, 479.0], [27.9, 479.0], [28.0, 479.0], [28.1, 479.0], [28.2, 479.0], [28.3, 479.0], [28.4, 480.0], [28.5, 480.0], [28.6, 480.0], [28.7, 480.0], [28.8, 480.0], [28.9, 480.0], [29.0, 481.0], [29.1, 481.0], [29.2, 481.0], [29.3, 481.0], [29.4, 481.0], [29.5, 481.0], [29.6, 481.0], [29.7, 481.0], [29.8, 482.0], [29.9, 482.0], [30.0, 482.0], [30.1, 482.0], [30.2, 482.0], [30.3, 482.0], [30.4, 482.0], [30.5, 482.0], [30.6, 482.0], [30.7, 482.0], [30.8, 483.0], [30.9, 483.0], [31.0, 483.0], [31.1, 483.0], [31.2, 483.0], [31.3, 483.0], [31.4, 484.0], [31.5, 484.0], [31.6, 484.0], [31.7, 484.0], [31.8, 484.0], [31.9, 485.0], [32.0, 485.0], [32.1, 485.0], [32.2, 485.0], [32.3, 485.0], [32.4, 485.0], [32.5, 485.0], [32.6, 485.0], [32.7, 485.0], [32.8, 485.0], [32.9, 486.0], [33.0, 486.0], [33.1, 486.0], [33.2, 486.0], [33.3, 486.0], [33.4, 486.0], [33.5, 486.0], [33.6, 486.0], [33.7, 486.0], [33.8, 487.0], [33.9, 487.0], [34.0, 487.0], [34.1, 487.0], [34.2, 488.0], [34.3, 488.0], [34.4, 488.0], [34.5, 489.0], [34.6, 489.0], [34.7, 489.0], [34.8, 489.0], [34.9, 489.0], [35.0, 489.0], [35.1, 489.0], [35.2, 489.0], [35.3, 489.0], [35.4, 489.0], [35.5, 489.0], [35.6, 490.0], [35.7, 490.0], [35.8, 491.0], [35.9, 491.0], [36.0, 491.0], [36.1, 492.0], [36.2, 492.0], [36.3, 493.0], [36.4, 493.0], [36.5, 493.0], [36.6, 493.0], [36.7, 493.0], [36.8, 493.0], [36.9, 493.0], [37.0, 493.0], [37.1, 493.0], [37.2, 493.0], [37.3, 493.0], [37.4, 494.0], [37.5, 494.0], [37.6, 494.0], [37.7, 494.0], [37.8, 494.0], [37.9, 494.0], [38.0, 495.0], [38.1, 496.0], [38.2, 496.0], [38.3, 496.0], [38.4, 496.0], [38.5, 496.0], [38.6, 497.0], [38.7, 497.0], [38.8, 497.0], [38.9, 498.0], [39.0, 499.0], [39.1, 499.0], [39.2, 500.0], [39.3, 500.0], [39.4, 500.0], [39.5, 502.0], [39.6, 502.0], [39.7, 502.0], [39.8, 502.0], [39.9, 503.0], [40.0, 503.0], [40.1, 503.0], [40.2, 504.0], [40.3, 505.0], [40.4, 505.0], [40.5, 505.0], [40.6, 506.0], [40.7, 506.0], [40.8, 506.0], [40.9, 506.0], [41.0, 507.0], [41.1, 507.0], [41.2, 507.0], [41.3, 508.0], [41.4, 508.0], [41.5, 509.0], [41.6, 510.0], [41.7, 510.0], [41.8, 510.0], [41.9, 510.0], [42.0, 511.0], [42.1, 511.0], [42.2, 512.0], [42.3, 512.0], [42.4, 513.0], [42.5, 513.0], [42.6, 513.0], [42.7, 513.0], [42.8, 513.0], [42.9, 513.0], [43.0, 513.0], [43.1, 514.0], [43.2, 514.0], [43.3, 515.0], [43.4, 515.0], [43.5, 515.0], [43.6, 515.0], [43.7, 515.0], [43.8, 515.0], [43.9, 516.0], [44.0, 516.0], [44.1, 516.0], [44.2, 517.0], [44.3, 517.0], [44.4, 517.0], [44.5, 518.0], [44.6, 518.0], [44.7, 518.0], [44.8, 519.0], [44.9, 520.0], [45.0, 521.0], [45.1, 521.0], [45.2, 522.0], [45.3, 522.0], [45.4, 523.0], [45.5, 524.0], [45.6, 524.0], [45.7, 524.0], [45.8, 524.0], [45.9, 525.0], [46.0, 525.0], [46.1, 525.0], [46.2, 525.0], [46.3, 526.0], [46.4, 526.0], [46.5, 528.0], [46.6, 528.0], [46.7, 528.0], [46.8, 529.0], [46.9, 529.0], [47.0, 529.0], [47.1, 529.0], [47.2, 529.0], [47.3, 529.0], [47.4, 531.0], [47.5, 532.0], [47.6, 532.0], [47.7, 532.0], [47.8, 533.0], [47.9, 534.0], [48.0, 535.0], [48.1, 535.0], [48.2, 535.0], [48.3, 537.0], [48.4, 540.0], [48.5, 540.0], [48.6, 541.0], [48.7, 541.0], [48.8, 541.0], [48.9, 541.0], [49.0, 544.0], [49.1, 544.0], [49.2, 544.0], [49.3, 544.0], [49.4, 546.0], [49.5, 546.0], [49.6, 546.0], [49.7, 547.0], [49.8, 547.0], [49.9, 548.0], [50.0, 548.0], [50.1, 549.0], [50.2, 550.0], [50.3, 550.0], [50.4, 551.0], [50.5, 551.0], [50.6, 552.0], [50.7, 552.0], [50.8, 552.0], [50.9, 553.0], [51.0, 554.0], [51.1, 555.0], [51.2, 555.0], [51.3, 556.0], [51.4, 556.0], [51.5, 556.0], [51.6, 556.0], [51.7, 557.0], [51.8, 558.0], [51.9, 558.0], [52.0, 559.0], [52.1, 559.0], [52.2, 560.0], [52.3, 561.0], [52.4, 561.0], [52.5, 562.0], [52.6, 562.0], [52.7, 562.0], [52.8, 564.0], [52.9, 564.0], [53.0, 565.0], [53.1, 565.0], [53.2, 566.0], [53.3, 567.0], [53.4, 567.0], [53.5, 567.0], [53.6, 568.0], [53.7, 569.0], [53.8, 569.0], [53.9, 570.0], [54.0, 570.0], [54.1, 570.0], [54.2, 572.0], [54.3, 573.0], [54.4, 574.0], [54.5, 574.0], [54.6, 577.0], [54.7, 579.0], [54.8, 579.0], [54.9, 580.0], [55.0, 580.0], [55.1, 581.0], [55.2, 581.0], [55.3, 582.0], [55.4, 582.0], [55.5, 582.0], [55.6, 583.0], [55.7, 583.0], [55.8, 584.0], [55.9, 584.0], [56.0, 588.0], [56.1, 588.0], [56.2, 588.0], [56.3, 589.0], [56.4, 590.0], [56.5, 590.0], [56.6, 590.0], [56.7, 591.0], [56.8, 592.0], [56.9, 592.0], [57.0, 594.0], [57.1, 594.0], [57.2, 595.0], [57.3, 595.0], [57.4, 598.0], [57.5, 601.0], [57.6, 601.0], [57.7, 601.0], [57.8, 602.0], [57.9, 602.0], [58.0, 603.0], [58.1, 605.0], [58.2, 605.0], [58.3, 605.0], [58.4, 611.0], [58.5, 612.0], [58.6, 615.0], [58.7, 615.0], [58.8, 616.0], [58.9, 618.0], [59.0, 618.0], [59.1, 620.0], [59.2, 620.0], [59.3, 620.0], [59.4, 622.0], [59.5, 623.0], [59.6, 623.0], [59.7, 623.0], [59.8, 625.0], [59.9, 626.0], [60.0, 626.0], [60.1, 629.0], [60.2, 630.0], [60.3, 630.0], [60.4, 632.0], [60.5, 633.0], [60.6, 633.0], [60.7, 633.0], [60.8, 633.0], [60.9, 634.0], [61.0, 634.0], [61.1, 635.0], [61.2, 636.0], [61.3, 636.0], [61.4, 637.0], [61.5, 637.0], [61.6, 639.0], [61.7, 641.0], [61.8, 641.0], [61.9, 641.0], [62.0, 642.0], [62.1, 643.0], [62.2, 643.0], [62.3, 645.0], [62.4, 645.0], [62.5, 647.0], [62.6, 648.0], [62.7, 648.0], [62.8, 648.0], [62.9, 648.0], [63.0, 650.0], [63.1, 652.0], [63.2, 652.0], [63.3, 653.0], [63.4, 653.0], [63.5, 653.0], [63.6, 654.0], [63.7, 657.0], [63.8, 660.0], [63.9, 660.0], [64.0, 660.0], [64.1, 660.0], [64.2, 661.0], [64.3, 662.0], [64.4, 662.0], [64.5, 664.0], [64.6, 665.0], [64.7, 666.0], [64.8, 666.0], [64.9, 667.0], [65.0, 667.0], [65.1, 667.0], [65.2, 667.0], [65.3, 667.0], [65.4, 668.0], [65.5, 668.0], [65.6, 668.0], [65.7, 669.0], [65.8, 670.0], [65.9, 671.0], [66.0, 671.0], [66.1, 672.0], [66.2, 676.0], [66.3, 677.0], [66.4, 677.0], [66.5, 677.0], [66.6, 677.0], [66.7, 679.0], [66.8, 680.0], [66.9, 680.0], [67.0, 684.0], [67.1, 684.0], [67.2, 685.0], [67.3, 687.0], [67.4, 687.0], [67.5, 687.0], [67.6, 687.0], [67.7, 688.0], [67.8, 688.0], [67.9, 688.0], [68.0, 690.0], [68.1, 690.0], [68.2, 690.0], [68.3, 690.0], [68.4, 691.0], [68.5, 691.0], [68.6, 691.0], [68.7, 692.0], [68.8, 694.0], [68.9, 694.0], [69.0, 694.0], [69.1, 695.0], [69.2, 695.0], [69.3, 696.0], [69.4, 696.0], [69.5, 697.0], [69.6, 697.0], [69.7, 697.0], [69.8, 697.0], [69.9, 700.0], [70.0, 703.0], [70.1, 705.0], [70.2, 705.0], [70.3, 706.0], [70.4, 706.0], [70.5, 707.0], [70.6, 708.0], [70.7, 708.0], [70.8, 708.0], [70.9, 709.0], [71.0, 710.0], [71.1, 710.0], [71.2, 711.0], [71.3, 711.0], [71.4, 712.0], [71.5, 712.0], [71.6, 714.0], [71.7, 715.0], [71.8, 715.0], [71.9, 717.0], [72.0, 719.0], [72.1, 719.0], [72.2, 720.0], [72.3, 720.0], [72.4, 721.0], [72.5, 722.0], [72.6, 725.0], [72.7, 726.0], [72.8, 726.0], [72.9, 729.0], [73.0, 731.0], [73.1, 732.0], [73.2, 732.0], [73.3, 732.0], [73.4, 732.0], [73.5, 734.0], [73.6, 735.0], [73.7, 737.0], [73.8, 738.0], [73.9, 738.0], [74.0, 740.0], [74.1, 740.0], [74.2, 740.0], [74.3, 740.0], [74.4, 740.0], [74.5, 741.0], [74.6, 743.0], [74.7, 743.0], [74.8, 747.0], [74.9, 747.0], [75.0, 749.0], [75.1, 749.0], [75.2, 750.0], [75.3, 753.0], [75.4, 753.0], [75.5, 762.0], [75.6, 762.0], [75.7, 764.0], [75.8, 769.0], [75.9, 770.0], [76.0, 770.0], [76.1, 772.0], [76.2, 773.0], [76.3, 775.0], [76.4, 780.0], [76.5, 780.0], [76.6, 781.0], [76.7, 782.0], [76.8, 784.0], [76.9, 790.0], [77.0, 790.0], [77.1, 793.0], [77.2, 793.0], [77.3, 794.0], [77.4, 805.0], [77.5, 805.0], [77.6, 806.0], [77.7, 807.0], [77.8, 818.0], [77.9, 819.0], [78.0, 824.0], [78.1, 824.0], [78.2, 825.0], [78.3, 832.0], [78.4, 833.0], [78.5, 841.0], [78.6, 841.0], [78.7, 842.0], [78.8, 851.0], [78.9, 853.0], [79.0, 855.0], [79.1, 855.0], [79.2, 856.0], [79.3, 857.0], [79.4, 859.0], [79.5, 860.0], [79.6, 860.0], [79.7, 862.0], [79.8, 871.0], [79.9, 871.0], [80.0, 874.0], [80.1, 877.0], [80.2, 877.0], [80.3, 881.0], [80.4, 881.0], [80.5, 885.0], [80.6, 885.0], [80.7, 885.0], [80.8, 885.0], [80.9, 894.0], [81.0, 894.0], [81.1, 896.0], [81.2, 896.0], [81.3, 897.0], [81.4, 897.0], [81.5, 899.0], [81.6, 903.0], [81.7, 903.0], [81.8, 904.0], [81.9, 909.0], [82.0, 911.0], [82.1, 913.0], [82.2, 913.0], [82.3, 913.0], [82.4, 921.0], [82.5, 923.0], [82.6, 923.0], [82.7, 929.0], [82.8, 929.0], [82.9, 930.0], [83.0, 937.0], [83.1, 939.0], [83.2, 941.0], [83.3, 941.0], [83.4, 942.0], [83.5, 942.0], [83.6, 963.0], [83.7, 972.0], [83.8, 972.0], [83.9, 972.0], [84.0, 974.0], [84.1, 987.0], [84.2, 1001.0], [84.3, 1001.0], [84.4, 1006.0], [84.5, 1010.0], [84.6, 1014.0], [84.7, 1039.0], [84.8, 1052.0], [84.9, 1052.0], [85.0, 1055.0], [85.1, 1065.0], [85.2, 1077.0], [85.3, 1081.0], [85.4, 1081.0], [85.5, 1090.0], [85.6, 1100.0], [85.7, 1103.0], [85.8, 1103.0], [85.9, 1103.0], [86.0, 1128.0], [86.1, 1132.0], [86.2, 1133.0], [86.3, 1137.0], [86.4, 1137.0], [86.5, 1145.0], [86.6, 1160.0], [86.7, 1176.0], [86.8, 1178.0], [86.9, 1179.0], [87.0, 1179.0], [87.1, 1181.0], [87.2, 1213.0], [87.3, 1216.0], [87.4, 1217.0], [87.5, 1217.0], [87.6, 1225.0], [87.7, 1244.0], [87.8, 1245.0], [87.9, 1262.0], [88.0, 1262.0], [88.1, 1263.0], [88.2, 1270.0], [88.3, 1274.0], [88.4, 1274.0], [88.5, 1274.0], [88.6, 1274.0], [88.7, 1288.0], [88.8, 1289.0], [88.9, 1292.0], [89.0, 1300.0], [89.1, 1300.0], [89.2, 1312.0], [89.3, 1338.0], [89.4, 1356.0], [89.5, 1362.0], [89.6, 1362.0], [89.7, 1390.0], [89.8, 1392.0], [89.9, 1397.0], [90.0, 1408.0], [90.1, 1408.0], [90.2, 1413.0], [90.3, 1418.0], [90.4, 1444.0], [90.5, 1483.0], [90.6, 1483.0], [90.7, 1493.0], [90.8, 1501.0], [90.9, 1503.0], [91.0, 1503.0], [91.1, 1503.0], [91.2, 1557.0], [91.3, 1568.0], [91.4, 1571.0], [91.5, 1577.0], [91.6, 1580.0], [91.7, 1580.0], [91.8, 1582.0], [91.9, 1582.0], [92.0, 1589.0], [92.1, 1593.0], [92.2, 1593.0], [92.3, 1618.0], [92.4, 1620.0], [92.5, 1620.0], [92.6, 1620.0], [92.7, 1620.0], [92.8, 1629.0], [92.9, 1652.0], [93.0, 1673.0], [93.1, 1728.0], [93.2, 1728.0], [93.3, 1753.0], [93.4, 1764.0], [93.5, 1777.0], [93.6, 1818.0], [93.7, 1948.0], [93.8, 1948.0], [93.9, 1951.0], [94.0, 1962.0], [94.1, 1970.0], [94.2, 2007.0], [94.3, 2007.0], [94.4, 2008.0], [94.5, 2033.0], [94.6, 2047.0], [94.7, 2076.0], [94.8, 2076.0], [94.9, 2121.0], [95.0, 2132.0], [95.1, 2136.0], [95.2, 2183.0], [95.3, 2183.0], [95.4, 2195.0], [95.5, 2227.0], [95.6, 2246.0], [95.7, 2280.0], [95.8, 2291.0], [95.9, 2291.0], [96.0, 2325.0], [96.1, 2363.0], [96.2, 2378.0], [96.3, 2423.0], [96.4, 2423.0], [96.5, 2429.0], [96.6, 2550.0], [96.7, 2585.0], [96.8, 2588.0], [96.9, 2588.0], [97.0, 2598.0], [97.1, 2683.0], [97.2, 2772.0], [97.3, 2774.0], [97.4, 2774.0], [97.5, 2849.0], [97.6, 2862.0], [97.7, 2904.0], [97.8, 2913.0], [97.9, 2961.0], [98.0, 2961.0], [98.1, 3052.0], [98.2, 3493.0], [98.3, 3693.0], [98.4, 3729.0], [98.5, 3729.0], [98.6, 3741.0], [98.7, 3818.0], [98.8, 4007.0], [98.9, 4087.0], [99.0, 4087.0], [99.1, 4132.0], [99.2, 4371.0], [99.3, 4934.0], [99.4, 5030.0], [99.5, 5030.0], [99.6, 5301.0], [99.7, 6401.0], [99.8, 7109.0], [99.9, 28472.0], [100.0, 28472.0]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[0.0, 506.0], [0.1, 509.0], [0.2, 510.0], [0.3, 510.0], [0.4, 513.0], [0.5, 514.0], [0.6, 514.0], [0.7, 514.0], [0.8, 516.0], [0.9, 517.0], [1.0, 517.0], [1.1, 518.0], [1.2, 518.0], [1.3, 521.0], [1.4, 521.0], [1.5, 522.0], [1.6, 522.0], [1.7, 523.0], [1.8, 525.0], [1.9, 526.0], [2.0, 527.0], [2.1, 527.0], [2.2, 528.0], [2.3, 529.0], [2.4, 530.0], [2.5, 530.0], [2.6, 530.0], [2.7, 531.0], [2.8, 532.0], [2.9, 532.0], [3.0, 532.0], [3.1, 533.0], [3.2, 533.0], [3.3, 534.0], [3.4, 534.0], [3.5, 534.0], [3.6, 535.0], [3.7, 535.0], [3.8, 535.0], [3.9, 536.0], [4.0, 537.0], [4.1, 537.0], [4.2, 537.0], [4.3, 537.0], [4.4, 538.0], [4.5, 538.0], [4.6, 538.0], [4.7, 539.0], [4.8, 540.0], [4.9, 540.0], [5.0, 540.0], [5.1, 541.0], [5.2, 541.0], [5.3, 542.0], [5.4, 542.0], [5.5, 542.0], [5.6, 543.0], [5.7, 544.0], [5.8, 545.0], [5.9, 545.0], [6.0, 545.0], [6.1, 546.0], [6.2, 547.0], [6.3, 547.0], [6.4, 547.0], [6.5, 547.0], [6.6, 548.0], [6.7, 548.0], [6.8, 548.0], [6.9, 549.0], [7.0, 550.0], [7.1, 552.0], [7.2, 552.0], [7.3, 552.0], [7.4, 552.0], [7.5, 552.0], [7.6, 554.0], [7.7, 556.0], [7.8, 556.0], [7.9, 556.0], [8.0, 556.0], [8.1, 557.0], [8.2, 557.0], [8.3, 557.0], [8.4, 558.0], [8.5, 559.0], [8.6, 560.0], [8.7, 561.0], [8.8, 562.0], [8.9, 563.0], [9.0, 568.0], [9.1, 568.0], [9.2, 568.0], [9.3, 571.0], [9.4, 571.0], [9.5, 571.0], [9.6, 571.0], [9.7, 572.0], [9.8, 573.0], [9.9, 573.0], [10.0, 576.0], [10.1, 577.0], [10.2, 577.0], [10.3, 578.0], [10.4, 580.0], [10.5, 585.0], [10.6, 585.0], [10.7, 586.0], [10.8, 589.0], [10.9, 591.0], [11.0, 597.0], [11.1, 598.0], [11.2, 600.0], [11.3, 603.0], [11.4, 606.0], [11.5, 606.0], [11.6, 606.0], [11.7, 609.0], [11.8, 610.0], [11.9, 612.0], [12.0, 613.0], [12.1, 617.0], [12.2, 619.0], [12.3, 619.0], [12.4, 620.0], [12.5, 621.0], [12.6, 626.0], [12.7, 628.0], [12.8, 635.0], [12.9, 639.0], [13.0, 639.0], [13.1, 644.0], [13.2, 644.0], [13.3, 646.0], [13.4, 647.0], [13.5, 648.0], [13.6, 649.0], [13.7, 649.0], [13.8, 650.0], [13.9, 650.0], [14.0, 651.0], [14.1, 653.0], [14.2, 653.0], [14.3, 654.0], [14.4, 654.0], [14.5, 655.0], [14.6, 655.0], [14.7, 657.0], [14.8, 657.0], [14.9, 657.0], [15.0, 657.0], [15.1, 657.0], [15.2, 658.0], [15.3, 659.0], [15.4, 659.0], [15.5, 659.0], [15.6, 659.0], [15.7, 662.0], [15.8, 662.0], [15.9, 662.0], [16.0, 663.0], [16.1, 663.0], [16.2, 663.0], [16.3, 663.0], [16.4, 664.0], [16.5, 665.0], [16.6, 665.0], [16.7, 666.0], [16.8, 666.0], [16.9, 666.0], [17.0, 666.0], [17.1, 667.0], [17.2, 667.0], [17.3, 667.0], [17.4, 668.0], [17.5, 668.0], [17.6, 668.0], [17.7, 668.0], [17.8, 668.0], [17.9, 668.0], [18.0, 668.0], [18.1, 669.0], [18.2, 669.0], [18.3, 670.0], [18.4, 670.0], [18.5, 671.0], [18.6, 671.0], [18.7, 671.0], [18.8, 672.0], [18.9, 672.0], [19.0, 672.0], [19.1, 672.0], [19.2, 672.0], [19.3, 672.0], [19.4, 673.0], [19.5, 673.0], [19.6, 673.0], [19.7, 673.0], [19.8, 673.0], [19.9, 673.0], [20.0, 674.0], [20.1, 674.0], [20.2, 674.0], [20.3, 674.0], [20.4, 674.0], [20.5, 674.0], [20.6, 675.0], [20.7, 675.0], [20.8, 675.0], [20.9, 675.0], [21.0, 676.0], [21.1, 676.0], [21.2, 676.0], [21.3, 676.0], [21.4, 677.0], [21.5, 677.0], [21.6, 677.0], [21.7, 677.0], [21.8, 677.0], [21.9, 677.0], [22.0, 677.0], [22.1, 677.0], [22.2, 678.0], [22.3, 678.0], [22.4, 679.0], [22.5, 679.0], [22.6, 680.0], [22.7, 680.0], [22.8, 680.0], [22.9, 681.0], [23.0, 681.0], [23.1, 681.0], [23.2, 682.0], [23.3, 682.0], [23.4, 682.0], [23.5, 683.0], [23.6, 683.0], [23.7, 684.0], [23.8, 685.0], [23.9, 685.0], [24.0, 686.0], [24.1, 686.0], [24.2, 687.0], [24.3, 687.0], [24.4, 688.0], [24.5, 688.0], [24.6, 688.0], [24.7, 689.0], [24.8, 689.0], [24.9, 689.0], [25.0, 689.0], [25.1, 689.0], [25.2, 689.0], [25.3, 690.0], [25.4, 690.0], [25.5, 691.0], [25.6, 691.0], [25.7, 691.0], [25.8, 691.0], [25.9, 691.0], [26.0, 691.0], [26.1, 691.0], [26.2, 692.0], [26.3, 692.0], [26.4, 692.0], [26.5, 692.0], [26.6, 692.0], [26.7, 693.0], [26.8, 693.0], [26.9, 693.0], [27.0, 693.0], [27.1, 694.0], [27.2, 694.0], [27.3, 694.0], [27.4, 695.0], [27.5, 695.0], [27.6, 695.0], [27.7, 696.0], [27.8, 696.0], [27.9, 696.0], [28.0, 696.0], [28.1, 696.0], [28.2, 697.0], [28.3, 697.0], [28.4, 697.0], [28.5, 698.0], [28.6, 699.0], [28.7, 699.0], [28.8, 699.0], [28.9, 699.0], [29.0, 700.0], [29.1, 700.0], [29.2, 700.0], [29.3, 700.0], [29.4, 700.0], [29.5, 701.0], [29.6, 701.0], [29.7, 701.0], [29.8, 701.0], [29.9, 701.0], [30.0, 702.0], [30.1, 702.0], [30.2, 702.0], [30.3, 702.0], [30.4, 702.0], [30.5, 702.0], [30.6, 702.0], [30.7, 702.0], [30.8, 703.0], [30.9, 704.0], [31.0, 704.0], [31.1, 705.0], [31.2, 706.0], [31.3, 706.0], [31.4, 707.0], [31.5, 707.0], [31.6, 707.0], [31.7, 708.0], [31.8, 708.0], [31.9, 709.0], [32.0, 709.0], [32.1, 709.0], [32.2, 710.0], [32.3, 710.0], [32.4, 710.0], [32.5, 710.0], [32.6, 711.0], [32.7, 711.0], [32.8, 711.0], [32.9, 712.0], [33.0, 712.0], [33.1, 712.0], [33.2, 712.0], [33.3, 713.0], [33.4, 713.0], [33.5, 714.0], [33.6, 714.0], [33.7, 714.0], [33.8, 714.0], [33.9, 715.0], [34.0, 715.0], [34.1, 716.0], [34.2, 716.0], [34.3, 716.0], [34.4, 716.0], [34.5, 716.0], [34.6, 716.0], [34.7, 716.0], [34.8, 716.0], [34.9, 717.0], [35.0, 717.0], [35.1, 717.0], [35.2, 718.0], [35.3, 718.0], [35.4, 718.0], [35.5, 718.0], [35.6, 719.0], [35.7, 719.0], [35.8, 719.0], [35.9, 719.0], [36.0, 719.0], [36.1, 720.0], [36.2, 720.0], [36.3, 720.0], [36.4, 720.0], [36.5, 720.0], [36.6, 720.0], [36.7, 721.0], [36.8, 721.0], [36.9, 722.0], [37.0, 722.0], [37.1, 722.0], [37.2, 722.0], [37.3, 722.0], [37.4, 723.0], [37.5, 723.0], [37.6, 724.0], [37.7, 725.0], [37.8, 725.0], [37.9, 725.0], [38.0, 727.0], [38.1, 727.0], [38.2, 728.0], [38.3, 728.0], [38.4, 728.0], [38.5, 729.0], [38.6, 729.0], [38.7, 729.0], [38.8, 730.0], [38.9, 731.0], [39.0, 732.0], [39.1, 732.0], [39.2, 733.0], [39.3, 733.0], [39.4, 733.0], [39.5, 734.0], [39.6, 736.0], [39.7, 736.0], [39.8, 736.0], [39.9, 736.0], [40.0, 736.0], [40.1, 737.0], [40.2, 737.0], [40.3, 737.0], [40.4, 738.0], [40.5, 739.0], [40.6, 739.0], [40.7, 739.0], [40.8, 740.0], [40.9, 740.0], [41.0, 740.0], [41.1, 741.0], [41.2, 742.0], [41.3, 743.0], [41.4, 743.0], [41.5, 743.0], [41.6, 744.0], [41.7, 744.0], [41.8, 747.0], [41.9, 748.0], [42.0, 749.0], [42.1, 751.0], [42.2, 751.0], [42.3, 751.0], [42.4, 751.0], [42.5, 752.0], [42.6, 753.0], [42.7, 753.0], [42.8, 754.0], [42.9, 754.0], [43.0, 756.0], [43.1, 757.0], [43.2, 758.0], [43.3, 758.0], [43.4, 759.0], [43.5, 761.0], [43.6, 761.0], [43.7, 761.0], [43.8, 762.0], [43.9, 762.0], [44.0, 763.0], [44.1, 763.0], [44.2, 765.0], [44.3, 765.0], [44.4, 765.0], [44.5, 767.0], [44.6, 768.0], [44.7, 770.0], [44.8, 770.0], [44.9, 772.0], [45.0, 774.0], [45.1, 775.0], [45.2, 778.0], [45.3, 779.0], [45.4, 779.0], [45.5, 779.0], [45.6, 782.0], [45.7, 782.0], [45.8, 782.0], [45.9, 785.0], [46.0, 785.0], [46.1, 786.0], [46.2, 787.0], [46.3, 788.0], [46.4, 789.0], [46.5, 790.0], [46.6, 792.0], [46.7, 793.0], [46.8, 793.0], [46.9, 793.0], [47.0, 794.0], [47.1, 795.0], [47.2, 795.0], [47.3, 796.0], [47.4, 796.0], [47.5, 797.0], [47.6, 798.0], [47.7, 799.0], [47.8, 799.0], [47.9, 801.0], [48.0, 801.0], [48.1, 802.0], [48.2, 805.0], [48.3, 806.0], [48.4, 806.0], [48.5, 806.0], [48.6, 806.0], [48.7, 807.0], [48.8, 807.0], [48.9, 807.0], [49.0, 807.0], [49.1, 807.0], [49.2, 808.0], [49.3, 809.0], [49.4, 810.0], [49.5, 810.0], [49.6, 810.0], [49.7, 811.0], [49.8, 812.0], [49.9, 812.0], [50.0, 815.0], [50.1, 816.0], [50.2, 817.0], [50.3, 823.0], [50.4, 826.0], [50.5, 828.0], [50.6, 829.0], [50.7, 829.0], [50.8, 829.0], [50.9, 830.0], [51.0, 830.0], [51.1, 830.0], [51.2, 832.0], [51.3, 833.0], [51.4, 835.0], [51.5, 836.0], [51.6, 838.0], [51.7, 838.0], [51.8, 839.0], [51.9, 839.0], [52.0, 840.0], [52.1, 841.0], [52.2, 841.0], [52.3, 843.0], [52.4, 845.0], [52.5, 846.0], [52.6, 849.0], [52.7, 851.0], [52.8, 852.0], [52.9, 853.0], [53.0, 855.0], [53.1, 855.0], [53.2, 856.0], [53.3, 856.0], [53.4, 858.0], [53.5, 858.0], [53.6, 862.0], [53.7, 863.0], [53.8, 865.0], [53.9, 867.0], [54.0, 867.0], [54.1, 869.0], [54.2, 871.0], [54.3, 875.0], [54.4, 877.0], [54.5, 879.0], [54.6, 879.0], [54.7, 880.0], [54.8, 881.0], [54.9, 883.0], [55.0, 885.0], [55.1, 887.0], [55.2, 892.0], [55.3, 892.0], [55.4, 894.0], [55.5, 896.0], [55.6, 899.0], [55.7, 900.0], [55.8, 903.0], [55.9, 906.0], [56.0, 908.0], [56.1, 910.0], [56.2, 914.0], [56.3, 918.0], [56.4, 918.0], [56.5, 919.0], [56.6, 920.0], [56.7, 921.0], [56.8, 922.0], [56.9, 922.0], [57.0, 922.0], [57.1, 923.0], [57.2, 926.0], [57.3, 927.0], [57.4, 928.0], [57.5, 929.0], [57.6, 930.0], [57.7, 930.0], [57.8, 935.0], [57.9, 937.0], [58.0, 937.0], [58.1, 938.0], [58.2, 940.0], [58.3, 940.0], [58.4, 942.0], [58.5, 943.0], [58.6, 945.0], [58.7, 945.0], [58.8, 946.0], [58.9, 946.0], [59.0, 948.0], [59.1, 949.0], [59.2, 950.0], [59.3, 950.0], [59.4, 952.0], [59.5, 953.0], [59.6, 955.0], [59.7, 957.0], [59.8, 960.0], [59.9, 966.0], [60.0, 971.0], [60.1, 972.0], [60.2, 972.0], [60.3, 973.0], [60.4, 975.0], [60.5, 978.0], [60.6, 978.0], [60.7, 979.0], [60.8, 981.0], [60.9, 982.0], [61.0, 983.0], [61.1, 986.0], [61.2, 992.0], [61.3, 996.0], [61.4, 1011.0], [61.5, 1015.0], [61.6, 1031.0], [61.7, 1032.0], [61.8, 1034.0], [61.9, 1040.0], [62.0, 1041.0], [62.1, 1047.0], [62.2, 1051.0], [62.3, 1053.0], [62.4, 1054.0], [62.5, 1055.0], [62.6, 1058.0], [62.7, 1062.0], [62.8, 1062.0], [62.9, 1065.0], [63.0, 1067.0], [63.1, 1068.0], [63.2, 1073.0], [63.3, 1080.0], [63.4, 1082.0], [63.5, 1086.0], [63.6, 1090.0], [63.7, 1096.0], [63.8, 1096.0], [63.9, 1100.0], [64.0, 1101.0], [64.1, 1106.0], [64.2, 1110.0], [64.3, 1113.0], [64.4, 1119.0], [64.5, 1120.0], [64.6, 1123.0], [64.7, 1124.0], [64.8, 1124.0], [64.9, 1125.0], [65.0, 1126.0], [65.1, 1128.0], [65.2, 1131.0], [65.3, 1132.0], [65.4, 1134.0], [65.5, 1144.0], [65.6, 1145.0], [65.7, 1148.0], [65.8, 1149.0], [65.9, 1149.0], [66.0, 1152.0], [66.1, 1152.0], [66.2, 1152.0], [66.3, 1153.0], [66.4, 1158.0], [66.5, 1160.0], [66.6, 1164.0], [66.7, 1169.0], [66.8, 1186.0], [66.9, 1193.0], [67.0, 1194.0], [67.1, 1197.0], [67.2, 1199.0], [67.3, 1205.0], [67.4, 1206.0], [67.5, 1206.0], [67.6, 1213.0], [67.7, 1224.0], [67.8, 1232.0], [67.9, 1236.0], [68.0, 1238.0], [68.1, 1249.0], [68.2, 1252.0], [68.3, 1252.0], [68.4, 1260.0], [68.5, 1263.0], [68.6, 1273.0], [68.7, 1281.0], [68.8, 1285.0], [68.9, 1285.0], [69.0, 1295.0], [69.1, 1297.0], [69.2, 1298.0], [69.3, 1301.0], [69.4, 1301.0], [69.5, 1303.0], [69.6, 1308.0], [69.7, 1313.0], [69.8, 1331.0], [69.9, 1331.0], [70.0, 1335.0], [70.1, 1335.0], [70.2, 1345.0], [70.3, 1346.0], [70.4, 1350.0], [70.5, 1352.0], [70.6, 1354.0], [70.7, 1358.0], [70.8, 1374.0], [70.9, 1376.0], [71.0, 1381.0], [71.1, 1383.0], [71.2, 1387.0], [71.3, 1387.0], [71.4, 1388.0], [71.5, 1394.0], [71.6, 1394.0], [71.7, 1395.0], [71.8, 1399.0], [71.9, 1403.0], [72.0, 1414.0], [72.1, 1422.0], [72.2, 1434.0], [72.3, 1440.0], [72.4, 1469.0], [72.5, 1472.0], [72.6, 1472.0], [72.7, 1483.0], [72.8, 1500.0], [72.9, 1501.0], [73.0, 1509.0], [73.1, 1513.0], [73.2, 1531.0], [73.3, 1534.0], [73.4, 1536.0], [73.5, 1539.0], [73.6, 1544.0], [73.7, 1568.0], [73.8, 1570.0], [73.9, 1577.0], [74.0, 1590.0], [74.1, 1606.0], [74.2, 1609.0], [74.3, 1611.0], [74.4, 1620.0], [74.5, 1625.0], [74.6, 1636.0], [74.7, 1644.0], [74.8, 1685.0], [74.9, 1688.0], [75.0, 1696.0], [75.1, 1703.0], [75.2, 1704.0], [75.3, 1716.0], [75.4, 1718.0], [75.5, 1751.0], [75.6, 1753.0], [75.7, 1761.0], [75.8, 1764.0], [75.9, 1780.0], [76.0, 1783.0], [76.1, 1809.0], [76.2, 1819.0], [76.3, 1822.0], [76.4, 1838.0], [76.5, 1851.0], [76.6, 1868.0], [76.7, 1893.0], [76.8, 1936.0], [76.9, 1953.0], [77.0, 1958.0], [77.1, 1975.0], [77.2, 1978.0], [77.3, 1982.0], [77.4, 1990.0], [77.5, 1999.0], [77.6, 2016.0], [77.7, 2023.0], [77.8, 2071.0], [77.9, 2107.0], [78.0, 2147.0], [78.1, 2171.0], [78.2, 2178.0], [78.3, 2206.0], [78.4, 2213.0], [78.5, 2224.0], [78.6, 2232.0], [78.7, 2235.0], [78.8, 2242.0], [78.9, 2246.0], [79.0, 2260.0], [79.1, 2261.0], [79.2, 2266.0], [79.3, 2268.0], [79.4, 2271.0], [79.5, 2280.0], [79.6, 2303.0], [79.7, 2335.0], [79.8, 2350.0], [79.9, 2352.0], [80.0, 2412.0], [80.1, 2427.0], [80.2, 2450.0], [80.3, 2454.0], [80.4, 2466.0], [80.5, 2482.0], [80.6, 2535.0], [80.7, 2554.0], [80.8, 2667.0], [80.9, 2682.0], [81.0, 2706.0], [81.1, 2734.0], [81.2, 2800.0], [81.3, 2807.0], [81.4, 2819.0], [81.5, 2832.0], [81.6, 2903.0], [81.7, 2911.0], [81.8, 2933.0], [81.9, 2946.0], [82.0, 2988.0], [82.1, 2992.0], [82.2, 3071.0], [82.3, 3096.0], [82.4, 3112.0], [82.5, 3130.0], [82.6, 3132.0], [82.7, 3150.0], [82.8, 3192.0], [82.9, 3246.0], [83.0, 3261.0], [83.1, 3270.0], [83.2, 3368.0], [83.3, 3372.0], [83.4, 3418.0], [83.5, 3560.0], [83.6, 3598.0], [83.7, 3604.0], [83.8, 3610.0], [83.9, 3628.0], [84.0, 3798.0], [84.1, 3933.0], [84.2, 4300.0], [84.3, 4335.0], [84.4, 4678.0], [84.5, 4912.0], [84.6, 4942.0], [84.7, 4955.0], [84.8, 5047.0], [84.9, 5122.0], [85.0, 5188.0], [85.1, 5349.0], [85.2, 5536.0], [85.3, 6081.0], [85.4, 6177.0], [85.5, 6552.0], [85.6, 6601.0], [85.7, 6893.0], [85.8, 7016.0], [85.9, 7030.0], [86.0, 7269.0], [86.1, 7378.0], [86.2, 7404.0], [86.3, 7419.0], [86.4, 7541.0], [86.5, 7619.0], [86.6, 7924.0], [86.7, 7925.0], [86.8, 7970.0], [86.9, 7993.0], [87.0, 8188.0], [87.1, 8320.0], [87.2, 8437.0], [87.3, 8475.0], [87.4, 8499.0], [87.5, 8597.0], [87.6, 8633.0], [87.7, 8671.0], [87.8, 8685.0], [87.9, 8695.0], [88.0, 8697.0], [88.1, 8755.0], [88.2, 8787.0], [88.3, 8798.0], [88.4, 8824.0], [88.5, 8825.0], [88.6, 8842.0], [88.7, 8921.0], [88.8, 8974.0], [88.9, 9191.0], [89.0, 9209.0], [89.1, 9234.0], [89.2, 9320.0], [89.3, 9320.0], [89.4, 9344.0], [89.5, 9387.0], [89.6, 9404.0], [89.7, 9405.0], [89.8, 9439.0], [89.9, 9449.0], [90.0, 9458.0], [90.1, 9507.0], [90.2, 9576.0], [90.3, 9633.0], [90.4, 9670.0], [90.5, 9696.0], [90.6, 9711.0], [90.7, 9722.0], [90.8, 9743.0], [90.9, 9750.0], [91.0, 9811.0], [91.1, 9849.0], [91.2, 9863.0], [91.3, 9890.0], [91.4, 9930.0], [91.5, 9944.0], [91.6, 9980.0], [91.7, 9993.0], [91.8, 10046.0], [91.9, 10054.0], [92.0, 10069.0], [92.1, 10089.0], [92.2, 10116.0], [92.3, 10118.0], [92.4, 10125.0], [92.5, 10136.0], [92.6, 10189.0], [92.7, 10202.0], [92.8, 10203.0], [92.9, 10222.0], [93.0, 10241.0], [93.1, 10244.0], [93.2, 10252.0], [93.3, 10261.0], [93.4, 10268.0], [93.5, 10307.0], [93.6, 10312.0], [93.7, 10329.0], [93.8, 10370.0], [93.9, 10397.0], [94.0, 10420.0], [94.1, 10498.0], [94.2, 10529.0], [94.3, 10529.0], [94.4, 10530.0], [94.5, 10550.0], [94.6, 10569.0], [94.7, 10700.0], [94.8, 10730.0], [94.9, 10881.0], [95.0, 10951.0], [95.1, 10958.0], [95.2, 10976.0], [95.3, 10992.0], [95.4, 11093.0], [95.5, 11095.0], [95.6, 11099.0], [95.7, 11111.0], [95.8, 11117.0], [95.9, 11129.0], [96.0, 11260.0], [96.1, 11316.0], [96.2, 11346.0], [96.3, 11358.0], [96.4, 11368.0], [96.5, 11372.0], [96.6, 11377.0], [96.7, 11389.0], [96.8, 11501.0], [96.9, 11527.0], [97.0, 11569.0], [97.1, 11646.0], [97.2, 11679.0], [97.3, 11701.0], [97.4, 11938.0], [97.5, 11982.0], [97.6, 12232.0], [97.7, 12530.0], [97.8, 12603.0], [97.9, 12711.0], [98.0, 12772.0], [98.1, 12784.0], [98.2, 12852.0], [98.3, 12893.0], [98.4, 12977.0], [98.5, 13164.0], [98.6, 13499.0], [98.7, 13621.0], [98.8, 13704.0], [98.9, 14022.0], [99.0, 15090.0], [99.1, 15188.0], [99.2, 15247.0], [99.3, 16986.0], [99.4, 17512.0], [99.5, 18016.0], [99.6, 18212.0], [99.7, 18516.0], [99.8, 23827.0], [99.9, 24153.0], [100.0, 26334.0]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 317.0, "series": [{"data": [[600.0, 100.0], [700.0, 61.0], [800.0, 34.0], [900.0, 21.0], [1000.0, 11.0], [1100.0, 13.0], [1200.0, 15.0], [1300.0, 8.0], [1400.0, 6.0], [1500.0, 12.0], [1600.0, 7.0], [1700.0, 4.0], [28400.0, 1.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 5.0], [2300.0, 3.0], [2200.0, 4.0], [2400.0, 2.0], [2500.0, 4.0], [2600.0, 1.0], [2800.0, 2.0], [2700.0, 2.0], [2900.0, 3.0], [3000.0, 1.0], [3400.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 1.0], [4000.0, 2.0], [4100.0, 1.0], [4300.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5300.0, 1.0], [400.0, 317.0], [6400.0, 1.0], [7100.0, 1.0], [500.0, 148.0]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[500.0, 114.0], [600.0, 181.0], [700.0, 192.0], [800.0, 80.0], [900.0, 58.0], [1000.0, 25.0], [1100.0, 35.0], [1200.0, 20.0], [1300.0, 26.0], [1400.0, 10.0], [1500.0, 13.0], [1600.0, 10.0], [1700.0, 10.0], [1800.0, 7.0], [1900.0, 8.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 13.0], [2300.0, 4.0], [2400.0, 6.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 2.0], [2800.0, 4.0], [2900.0, 6.0], [3000.0, 2.0], [3100.0, 5.0], [3200.0, 3.0], [3300.0, 3.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 1.0], [3900.0, 1.0], [4300.0, 2.0], [4600.0, 1.0], [4900.0, 3.0], [5100.0, 2.0], [5000.0, 1.0], [5300.0, 1.0], [5500.0, 1.0], [6100.0, 1.0], [6000.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 1.0], [7400.0, 2.0], [7500.0, 1.0], [7600.0, 1.0], [7900.0, 4.0], [8100.0, 1.0], [8300.0, 1.0], [8400.0, 3.0], [8500.0, 1.0], [8600.0, 5.0], [8700.0, 3.0], [8800.0, 3.0], [8900.0, 2.0], [9100.0, 2.0], [9200.0, 2.0], [9300.0, 4.0], [9400.0, 5.0], [9500.0, 2.0], [9600.0, 3.0], [9700.0, 4.0], [9800.0, 4.0], [9900.0, 4.0], [10000.0, 4.0], [10100.0, 5.0], [10200.0, 8.0], [10300.0, 5.0], [10400.0, 2.0], [10500.0, 6.0], [10700.0, 2.0], [10800.0, 1.0], [10900.0, 4.0], [11100.0, 3.0], [11000.0, 3.0], [11200.0, 1.0], [11300.0, 7.0], [11500.0, 3.0], [11600.0, 2.0], [11700.0, 1.0], [11900.0, 2.0], [12200.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [12700.0, 3.0], [12800.0, 2.0], [13100.0, 1.0], [12900.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [13700.0, 1.0], [14000.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [16900.0, 1.0], [17500.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [18500.0, 1.0], [23800.0, 1.0], [24100.0, 1.0], [26300.0, 1.0]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 319.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1157.0, "series": [{"data": [[0.0, 319.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1157.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 351.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.69536444E12, "maxY": 66.21546961325966, "series": [{"data": [[1.6953648E12, 51.583783783783794], [1.6953645E12, 10.0], [1.69536516E12, 49.517045454545446], [1.69536486E12, 50.0], [1.69536522E12, 41.83018867924528], [1.69536456E12, 13.567567567567568], [1.69536492E12, 40.198630136986324], [1.69536462E12, 43.12230215827337], [1.69536498E12, 30.0], [1.69536468E12, 45.0], [1.69536504E12, 31.611111111111107], [1.69536474E12, 66.21546961325966], [1.6953651E12, 63.209424083769655], [1.69536444E12, 10.0]], "isOverall": false, "label": "Spike Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69536522E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 451.0, "minX": 1.0, "maxY": 23990.0, "series": [{"data": [[5.0, 509.0], [7.0, 741.0], [8.0, 667.0], [10.0, 1074.5333333333335], [12.0, 515.0], [13.0, 555.0], [14.0, 740.0], [15.0, 468.5], [16.0, 681.0], [17.0, 1213.0], [18.0, 874.0], [19.0, 517.0], [20.0, 578.6666666666666], [21.0, 469.0], [22.0, 634.6666666666666], [23.0, 505.0], [24.0, 520.0], [25.0, 506.5], [26.0, 866.5], [27.0, 647.5], [28.0, 2434.5], [29.0, 516.0], [30.0, 571.8333333333331], [31.0, 551.6666666666666], [33.0, 459.0], [32.0, 500.6], [34.0, 581.6666666666666], [35.0, 502.0], [36.0, 474.0], [37.0, 835.6666666666666], [38.0, 475.25], [39.0, 523.5], [40.0, 525.75], [41.0, 509.0], [42.0, 532.6666666666666], [43.0, 516.5], [44.0, 615.0], [45.0, 630.6600000000002], [47.0, 763.5], [46.0, 1442.5], [49.0, 852.0], [48.0, 722.3000000000001], [51.0, 3674.2499999999995], [50.0, 798.6872727272729], [53.0, 1286.8333333333333], [52.0, 1518.9090909090908], [55.0, 1987.4999999999998], [54.0, 2485.25], [57.0, 1405.0], [56.0, 1355.6666666666667], [59.0, 1564.8], [58.0, 1409.8333333333335], [61.0, 859.6000000000001], [60.0, 1337.8], [63.0, 589.3333333333334], [62.0, 698.0], [67.0, 476.0], [66.0, 595.1818181818181], [65.0, 504.25], [64.0, 656.0], [83.0, 478.0], [82.0, 695.0], [81.0, 479.0], [87.0, 923.0], [86.0, 462.0], [85.0, 462.0], [84.0, 451.0], [91.0, 511.0], [89.0, 515.0], [88.0, 731.0], [95.0, 594.5], [94.0, 1571.0], [93.0, 713.5], [92.0, 461.0], [97.0, 452.0], [96.0, 502.5], [98.0, 526.0], [103.0, 462.0], [102.0, 465.0], [100.0, 706.0], [104.0, 452.0]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[45.09270704573542, 829.3349814585905]], "isOverall": false, "label": "Career-Aggregated", "isController": false}, {"data": [[2.0, 699.0], [3.0, 562.0], [4.0, 619.0], [6.0, 807.0], [7.0, 1173.2], [8.0, 816.3333333333334], [9.0, 1206.0], [10.0, 899.65625], [11.0, 518.0], [14.0, 678.0], [15.0, 540.0], [16.0, 736.0], [17.0, 672.0], [18.0, 654.0], [19.0, 684.3333333333334], [20.0, 680.0], [21.0, 667.6666666666666], [22.0, 716.0], [23.0, 661.3333333333334], [24.0, 837.0], [25.0, 846.0], [26.0, 644.0], [27.0, 748.6666666666666], [28.0, 773.7857142857142], [29.0, 727.2142857142857], [30.0, 749.7476635514017], [31.0, 661.2857142857143], [32.0, 639.75], [33.0, 806.75], [34.0, 745.0], [35.0, 877.5714285714286], [36.0, 767.6666666666667], [37.0, 691.2], [38.0, 667.5], [39.0, 719.5], [40.0, 741.75], [41.0, 717.0], [42.0, 533.0], [43.0, 767.8], [44.0, 1018.8888888888889], [45.0, 965.5723684210528], [47.0, 1373.125], [46.0, 1318.25], [49.0, 1400.125], [48.0, 1347.0000000000002], [51.0, 1180.1764705882356], [50.0, 1171.944078947369], [52.0, 1922.9166666666665], [53.0, 2616.5555555555557], [55.0, 2346.0], [54.0, 3014.818181818182], [59.0, 1580.5], [58.0, 7456.25], [61.0, 8837.5], [60.0, 23990.0], [62.0, 10088.4], [63.0, 14484.142857142859], [67.0, 10927.57142857143], [66.0, 10139.125000000002], [65.0, 10815.09090909091], [64.0, 11981.25], [71.0, 10769.0], [70.0, 10523.75], [69.0, 11378.0], [68.0, 10995.333333333334], [75.0, 10251.6], [74.0, 10228.666666666666], [73.0, 10096.857142857143], [72.0, 10396.538461538463], [79.0, 7537.3125], [78.0, 5083.0], [77.0, 9385.166666666666], [76.0, 10023.75], [83.0, 9115.333333333334], [82.0, 9344.0], [81.0, 9444.0], [80.0, 8300.555555555555], [87.0, 7342.5], [86.0, 8499.0], [85.0, 8475.0], [84.0, 8743.4], [90.0, 1745.857142857143], [89.0, 4535.857142857143], [88.0, 6004.142857142857], [91.0, 1199.0], [94.0, 858.0], [92.0, 722.0], [99.0, 680.0], [98.0, 532.0], [97.0, 1205.0], [101.0, 693.0], [1.0, 693.0]], "isOverall": false, "label": "About Us", "isController": false}, {"data": [[47.6434184675835, 2468.7121807465633]], "isOverall": false, "label": "About Us-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 104.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 168.25, "minX": 1.69536444E12, "maxY": 186963.68333333332, "series": [{"data": [[1.6953648E12, 172122.3], [1.6953645E12, 34562.933333333334], [1.69536516E12, 164703.96666666667], [1.69536486E12, 165910.8], [1.69536522E12, 144398.78333333333], [1.69536456E12, 34562.05], [1.69536492E12, 139172.0], [1.69536462E12, 129108.05], [1.69536498E12, 99774.71666666666], [1.69536468E12, 153834.06666666668], [1.69536504E12, 99373.08333333333], [1.69536474E12, 179488.36666666667], [1.6953651E12, 186963.68333333332], [1.69536444E12, 13169.966666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6953648E12, 2911.25], [1.6953645E12, 577.5833333333334], [1.69536516E12, 2737.3333333333335], [1.69536486E12, 2838.0833333333335], [1.69536522E12, 2621.4166666666665], [1.69536456E12, 577.5833333333334], [1.69536492E12, 2184.8333333333335], [1.69536462E12, 2194.75], [1.69536498E12, 1770.5833333333333], [1.69536468E12, 2680.0833333333335], [1.69536504E12, 1737.0], [1.69536474E12, 2473.5833333333335], [1.6953651E12, 2692.75], [1.69536444E12, 168.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69536522E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 475.6666666666667, "minX": 1.69536444E12, "maxY": 6665.562499999997, "series": [{"data": [[1.6953648E12, 1800.0000000000002], [1.6953645E12, 1481.5294117647056], [1.69536516E12, 600.1875], [1.69536486E12, 989.3604651162791], [1.69536522E12, 581.2470588235294], [1.69536456E12, 598.2352941176471], [1.69536492E12, 637.6779661016949], [1.69536462E12, 530.4848484848487], [1.69536498E12, 549.5178571428571], [1.69536468E12, 688.8795180722891], [1.69536504E12, 664.3703703703703], [1.69536474E12, 612.867924528302], [1.6953651E12, 1049.2063492063492], [1.69536444E12, 475.6666666666667]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[1.6953648E12, 1862.0000000000011], [1.6953645E12, 724.0], [1.69536516E12, 882.8437500000001], [1.69536486E12, 1693.161290322581], [1.69536522E12, 754.391891891892], [1.69536456E12, 846.7], [1.69536492E12, 759.9195402298852], [1.69536462E12, 777.1369863013703], [1.69536498E12, 680.2830188679244], [1.69536468E12, 1101.8809523809523], [1.69536504E12, 786.5370370370371], [1.69536474E12, 6572.3359375], [1.6953651E12, 6665.562499999997], [1.69536444E12, 1283.6]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69536522E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 406.0, "minX": 1.69536444E12, "maxY": 4350.093749999999, "series": [{"data": [[1.6953648E12, 795.8505747126436], [1.6953645E12, 1397.5882352941176], [1.69536516E12, 465.1624999999999], [1.69536486E12, 585.2558139534883], [1.69536522E12, 470.0470588235294], [1.69536456E12, 515.764705882353], [1.69536492E12, 444.94915254237293], [1.69536462E12, 437.8181818181818], [1.69536498E12, 461.30357142857144], [1.69536468E12, 514.2409638554217], [1.69536504E12, 542.5370370370371], [1.69536474E12, 487.4905660377358], [1.6953651E12, 635.9999999999997], [1.69536444E12, 406.0]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[1.6953648E12, 897.9999999999995], [1.6953645E12, 520.2], [1.69536516E12, 591.1874999999999], [1.69536486E12, 895.0967741935484], [1.69536522E12, 514.8648648648647], [1.69536456E12, 549.4], [1.69536492E12, 545.2988505747122], [1.69536462E12, 551.9589041095891], [1.69536498E12, 458.8679245283019], [1.69536468E12, 793.3809523809526], [1.69536504E12, 522.0], [1.69536474E12, 4350.093749999999], [1.6953651E12, 3959.7734374999986], [1.69536444E12, 700.7]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69536522E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69536444E12, "maxY": 1501.8671875000002, "series": [{"data": [[1.6953648E12, 0.0], [1.6953645E12, 0.0], [1.69536516E12, 7.087500000000002], [1.69536486E12, 0.0], [1.69536522E12, 0.0], [1.69536456E12, 0.0], [1.69536492E12, 0.0], [1.69536462E12, 0.0], [1.69536498E12, 0.0], [1.69536468E12, 0.0], [1.69536504E12, 0.0], [1.69536474E12, 0.0], [1.6953651E12, 0.0], [1.69536444E12, 0.0]], "isOverall": false, "label": "Career", "isController": false}, {"data": [[1.6953648E12, 289.0408163265307], [1.6953645E12, 53.699999999999996], [1.69536516E12, 136.8229166666667], [1.69536486E12, 358.3225806451613], [1.69536522E12, 62.702702702702666], [1.69536456E12, 75.75], [1.69536492E12, 86.80459770114942], [1.69536462E12, 74.3150684931507], [1.69536498E12, 41.52830188679243], [1.69536468E12, 182.40476190476198], [1.69536504E12, 52.648148148148145], [1.69536474E12, 1501.8671875000002], [1.6953651E12, 762.7187499999998], [1.69536444E12, 171.09999999999997]], "isOverall": false, "label": "About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69536522E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 447.0, "minX": 1.69536444E12, "maxY": 28472.0, "series": [{"data": [[1.6953648E12, 28472.0], [1.6953645E12, 5301.0], [1.69536516E12, 2800.0], [1.69536486E12, 15247.0], [1.69536522E12, 1536.0], [1.69536456E12, 1851.0], [1.69536492E12, 3418.0], [1.69536462E12, 2911.0], [1.69536498E12, 2280.0], [1.69536468E12, 4942.0], [1.69536504E12, 3693.0], [1.69536474E12, 15188.0], [1.6953651E12, 26334.0], [1.69536444E12, 2271.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6953648E12, 3303.8000000000006], [1.6953645E12, 3107.0000000000036], [1.69536516E12, 1070.1000000000001], [1.69536486E12, 2429.0], [1.69536522E12, 909.0], [1.69536456E12, 1109.0000000000007], [1.69536492E12, 909.6000000000001], [1.69536462E12, 774.0], [1.69536498E12, 736.0], [1.69536468E12, 1288.2], [1.69536504E12, 1153.4], [1.69536474E12, 11355.6], [1.6953651E12, 11452.800000000003], [1.69536444E12, 2109.7999999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6953648E12, 12927.499999999753], [1.6953645E12, 5301.0], [1.69536516E12, 2530.4999999999964], [1.69536486E12, 10849.399999999938], [1.69536522E12, 1426.800000000001], [1.69536456E12, 1851.0], [1.69536492E12, 2813.5800000000017], [1.69536462E12, 2636.199999999996], [1.69536498E12, 2252.8000000000015], [1.69536468E12, 4762.479999999998], [1.69536504E12, 3547.0199999999945], [1.69536474E12, 15107.640000000001], [1.6953651E12, 24327.479999999967], [1.69536444E12, 2271.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6953648E12, 4094.4999999999986], [1.6953645E12, 5057.1], [1.69536516E12, 1416.500000000001], [1.69536486E12, 3372.0], [1.69536522E12, 1103.0], [1.69536456E12, 1386.6000000000008], [1.69536492E12, 1256.3500000000006], [1.69536462E12, 1153.0], [1.69536498E12, 1088.0], [1.69536468E12, 2630.5999999999967], [1.69536504E12, 1408.55], [1.69536474E12, 11914.300000000001], [1.6953651E12, 13394.999999999976], [1.69536444E12, 2271.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6953648E12, 462.0], [1.6953645E12, 457.0], [1.69536516E12, 450.0], [1.69536486E12, 454.0], [1.69536522E12, 453.0], [1.69536456E12, 459.0], [1.69536492E12, 451.0], [1.69536462E12, 447.0], [1.69536498E12, 453.0], [1.69536468E12, 448.0], [1.69536504E12, 456.0], [1.69536474E12, 450.0], [1.6953651E12, 451.0], [1.69536444E12, 468.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6953648E12, 1350.0], [1.6953645E12, 679.0], [1.69536516E12, 686.0], [1.69536486E12, 883.0], [1.69536522E12, 623.0], [1.69536456E12, 690.0], [1.69536492E12, 666.5], [1.69536462E12, 578.0], [1.69536498E12, 525.0], [1.69536468E12, 698.0], [1.69536504E12, 611.5], [1.69536474E12, 1483.0], [1.6953651E12, 1629.0], [1.69536444E12, 946.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69536522E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 674.0, "minX": 1.0, "maxY": 11368.0, "series": [{"data": [[2.0, 675.0], [8.0, 2003.0], [9.0, 1463.5], [10.0, 2114.0], [3.0, 674.0], [12.0, 8487.0], [13.0, 9458.0], [14.0, 9541.5], [1.0, 677.0], [4.0, 711.0], [16.0, 1719.0], [17.0, 11368.0], [18.0, 10264.5], [5.0, 803.5], [6.0, 834.5], [7.0, 2138.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 436.5, "minX": 1.0, "maxY": 6913.0, "series": [{"data": [[2.0, 442.0], [8.0, 826.0], [9.0, 746.5], [10.0, 885.0], [3.0, 447.0], [12.0, 6035.0], [13.0, 6210.0], [14.0, 6156.0], [1.0, 436.5], [4.0, 466.5], [16.0, 923.0], [17.0, 6913.0], [18.0, 6165.5], [5.0, 546.0], [6.0, 562.0], [7.0, 898.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.69536444E12, "maxY": 3.2333333333333334, "series": [{"data": [[1.6953648E12, 2.9], [1.6953645E12, 0.6], [1.69536516E12, 2.9], [1.69536486E12, 2.966666666666667], [1.69536522E12, 2.6333333333333333], [1.69536456E12, 0.6333333333333333], [1.69536492E12, 2.433333333333333], [1.69536462E12, 2.3833333333333333], [1.69536498E12, 1.8333333333333333], [1.69536468E12, 2.7], [1.69536504E12, 1.7833333333333334], [1.69536474E12, 3.2333333333333334], [1.6953651E12, 3.216666666666667], [1.69536444E12, 0.23333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69536522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.69536444E12, "maxY": 3.183333333333333, "series": [{"data": [[1.6953648E12, 3.0833333333333335], [1.6953645E12, 0.6166666666666667], [1.69536516E12, 2.933333333333333], [1.69536486E12, 2.9833333333333334], [1.69536522E12, 2.65], [1.69536456E12, 0.6166666666666667], [1.69536492E12, 2.433333333333333], [1.69536462E12, 2.316666666666667], [1.69536498E12, 1.8166666666666667], [1.69536468E12, 2.783333333333333], [1.69536504E12, 1.8], [1.69536474E12, 3.0166666666666666], [1.6953651E12, 3.183333333333333], [1.69536444E12, 0.21666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69536522E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69536444E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.6953648E12, 1.45], [1.6953645E12, 0.2833333333333333], [1.69536516E12, 1.3333333333333333], [1.69536486E12, 1.4333333333333333], [1.69536522E12, 1.4166666666666667], [1.69536456E12, 0.2833333333333333], [1.69536492E12, 0.9833333333333333], [1.69536462E12, 1.1], [1.69536498E12, 0.9333333333333333], [1.69536468E12, 1.3833333333333333], [1.69536504E12, 0.9], [1.69536474E12, 0.8833333333333333], [1.6953651E12, 1.05], [1.69536444E12, 0.05]], "isOverall": false, "label": "Career-success", "isController": false}, {"data": [[1.6953648E12, 1.6333333333333333], [1.6953645E12, 0.3333333333333333], [1.69536516E12, 1.6], [1.69536486E12, 1.55], [1.69536522E12, 1.2333333333333334], [1.69536456E12, 0.3333333333333333], [1.69536492E12, 1.45], [1.69536462E12, 1.2166666666666666], [1.69536498E12, 0.8833333333333333], [1.69536468E12, 1.4], [1.69536504E12, 0.9], [1.69536474E12, 2.1333333333333333], [1.6953651E12, 2.1333333333333333], [1.69536444E12, 0.16666666666666666]], "isOverall": false, "label": "About Us-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69536522E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.69536444E12, "maxY": 3.183333333333333, "series": [{"data": [[1.6953648E12, 3.0833333333333335], [1.6953645E12, 0.6166666666666667], [1.69536516E12, 2.933333333333333], [1.69536486E12, 2.9833333333333334], [1.69536522E12, 2.65], [1.69536456E12, 0.6166666666666667], [1.69536492E12, 2.433333333333333], [1.69536462E12, 2.316666666666667], [1.69536498E12, 1.8166666666666667], [1.69536468E12, 2.783333333333333], [1.69536504E12, 1.8], [1.69536474E12, 3.0166666666666666], [1.6953651E12, 3.183333333333333], [1.69536444E12, 0.21666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69536522E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

