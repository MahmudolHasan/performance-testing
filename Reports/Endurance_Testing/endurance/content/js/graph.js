/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 448.0, "minX": 0.0, "maxY": 75092.0, "series": [{"data": [[0.0, 448.0], [0.1, 448.0], [0.2, 448.0], [0.3, 448.0], [0.4, 448.0], [0.5, 450.0], [0.6, 451.0], [0.7, 451.0], [0.8, 451.0], [0.9, 454.0], [1.0, 454.0], [1.1, 454.0], [1.2, 454.0], [1.3, 455.0], [1.4, 455.0], [1.5, 455.0], [1.6, 455.0], [1.7, 455.0], [1.8, 455.0], [1.9, 455.0], [2.0, 455.0], [2.1, 456.0], [2.2, 456.0], [2.3, 456.0], [2.4, 456.0], [2.5, 457.0], [2.6, 457.0], [2.7, 457.0], [2.8, 457.0], [2.9, 458.0], [3.0, 458.0], [3.1, 458.0], [3.2, 458.0], [3.3, 458.0], [3.4, 458.0], [3.5, 459.0], [3.6, 459.0], [3.7, 459.0], [3.8, 459.0], [3.9, 460.0], [4.0, 460.0], [4.1, 460.0], [4.2, 460.0], [4.3, 460.0], [4.4, 460.0], [4.5, 461.0], [4.6, 462.0], [4.7, 462.0], [4.8, 462.0], [4.9, 463.0], [5.0, 463.0], [5.1, 463.0], [5.2, 463.0], [5.3, 463.0], [5.4, 463.0], [5.5, 464.0], [5.6, 464.0], [5.7, 464.0], [5.8, 464.0], [5.9, 464.0], [6.0, 464.0], [6.1, 464.0], [6.2, 465.0], [6.3, 465.0], [6.4, 465.0], [6.5, 465.0], [6.6, 466.0], [6.7, 466.0], [6.8, 466.0], [6.9, 466.0], [7.0, 466.0], [7.1, 466.0], [7.2, 466.0], [7.3, 466.0], [7.4, 466.0], [7.5, 466.0], [7.6, 467.0], [7.7, 467.0], [7.8, 467.0], [7.9, 467.0], [8.0, 467.0], [8.1, 467.0], [8.2, 468.0], [8.3, 468.0], [8.4, 468.0], [8.5, 468.0], [8.6, 468.0], [8.7, 468.0], [8.8, 468.0], [8.9, 469.0], [9.0, 469.0], [9.1, 469.0], [9.2, 469.0], [9.3, 469.0], [9.4, 469.0], [9.5, 469.0], [9.6, 470.0], [9.7, 470.0], [9.8, 470.0], [9.9, 470.0], [10.0, 470.0], [10.1, 470.0], [10.2, 471.0], [10.3, 471.0], [10.4, 471.0], [10.5, 471.0], [10.6, 471.0], [10.7, 471.0], [10.8, 471.0], [10.9, 471.0], [11.0, 471.0], [11.1, 471.0], [11.2, 472.0], [11.3, 472.0], [11.4, 472.0], [11.5, 472.0], [11.6, 472.0], [11.7, 472.0], [11.8, 473.0], [11.9, 473.0], [12.0, 473.0], [12.1, 473.0], [12.2, 473.0], [12.3, 473.0], [12.4, 474.0], [12.5, 474.0], [12.6, 475.0], [12.7, 475.0], [12.8, 475.0], [12.9, 475.0], [13.0, 475.0], [13.1, 475.0], [13.2, 475.0], [13.3, 475.0], [13.4, 476.0], [13.5, 476.0], [13.6, 476.0], [13.7, 476.0], [13.8, 476.0], [13.9, 476.0], [14.0, 476.0], [14.1, 476.0], [14.2, 476.0], [14.3, 476.0], [14.4, 477.0], [14.5, 477.0], [14.6, 477.0], [14.7, 477.0], [14.8, 477.0], [14.9, 477.0], [15.0, 477.0], [15.1, 478.0], [15.2, 478.0], [15.3, 478.0], [15.4, 478.0], [15.5, 478.0], [15.6, 478.0], [15.7, 478.0], [15.8, 478.0], [15.9, 478.0], [16.0, 478.0], [16.1, 479.0], [16.2, 479.0], [16.3, 479.0], [16.4, 479.0], [16.5, 479.0], [16.6, 479.0], [16.7, 479.0], [16.8, 479.0], [16.9, 479.0], [17.0, 479.0], [17.1, 480.0], [17.2, 480.0], [17.3, 480.0], [17.4, 480.0], [17.5, 480.0], [17.6, 480.0], [17.7, 480.0], [17.8, 480.0], [17.9, 481.0], [18.0, 481.0], [18.1, 481.0], [18.2, 481.0], [18.3, 481.0], [18.4, 481.0], [18.5, 481.0], [18.6, 481.0], [18.7, 481.0], [18.8, 481.0], [18.9, 482.0], [19.0, 482.0], [19.1, 482.0], [19.2, 482.0], [19.3, 482.0], [19.4, 482.0], [19.5, 482.0], [19.6, 483.0], [19.7, 483.0], [19.8, 483.0], [19.9, 483.0], [20.0, 483.0], [20.1, 484.0], [20.2, 485.0], [20.3, 485.0], [20.4, 485.0], [20.5, 485.0], [20.6, 485.0], [20.7, 485.0], [20.8, 485.0], [20.9, 486.0], [21.0, 486.0], [21.1, 486.0], [21.2, 486.0], [21.3, 486.0], [21.4, 486.0], [21.5, 487.0], [21.6, 487.0], [21.7, 487.0], [21.8, 487.0], [21.9, 487.0], [22.0, 487.0], [22.1, 487.0], [22.2, 487.0], [22.3, 487.0], [22.4, 488.0], [22.5, 488.0], [22.6, 488.0], [22.7, 488.0], [22.8, 488.0], [22.9, 488.0], [23.0, 488.0], [23.1, 488.0], [23.2, 489.0], [23.3, 489.0], [23.4, 489.0], [23.5, 489.0], [23.6, 489.0], [23.7, 490.0], [23.8, 490.0], [23.9, 490.0], [24.0, 490.0], [24.1, 490.0], [24.2, 490.0], [24.3, 490.0], [24.4, 491.0], [24.5, 491.0], [24.6, 491.0], [24.7, 492.0], [24.8, 492.0], [24.9, 492.0], [25.0, 492.0], [25.1, 492.0], [25.2, 493.0], [25.3, 493.0], [25.4, 493.0], [25.5, 493.0], [25.6, 493.0], [25.7, 494.0], [25.8, 494.0], [25.9, 494.0], [26.0, 494.0], [26.1, 494.0], [26.2, 494.0], [26.3, 494.0], [26.4, 494.0], [26.5, 495.0], [26.6, 495.0], [26.7, 495.0], [26.8, 495.0], [26.9, 495.0], [27.0, 495.0], [27.1, 496.0], [27.2, 496.0], [27.3, 496.0], [27.4, 496.0], [27.5, 496.0], [27.6, 496.0], [27.7, 496.0], [27.8, 497.0], [27.9, 497.0], [28.0, 497.0], [28.1, 497.0], [28.2, 498.0], [28.3, 498.0], [28.4, 499.0], [28.5, 499.0], [28.6, 499.0], [28.7, 500.0], [28.8, 501.0], [28.9, 501.0], [29.0, 501.0], [29.1, 501.0], [29.2, 502.0], [29.3, 502.0], [29.4, 502.0], [29.5, 505.0], [29.6, 505.0], [29.7, 505.0], [29.8, 505.0], [29.9, 505.0], [30.0, 505.0], [30.1, 505.0], [30.2, 506.0], [30.3, 506.0], [30.4, 507.0], [30.5, 508.0], [30.6, 508.0], [30.7, 510.0], [30.8, 510.0], [30.9, 510.0], [31.0, 510.0], [31.1, 510.0], [31.2, 511.0], [31.3, 511.0], [31.4, 511.0], [31.5, 511.0], [31.6, 511.0], [31.7, 511.0], [31.8, 511.0], [31.9, 511.0], [32.0, 511.0], [32.1, 511.0], [32.2, 512.0], [32.3, 512.0], [32.4, 513.0], [32.5, 514.0], [32.6, 514.0], [32.7, 514.0], [32.8, 514.0], [32.9, 514.0], [33.0, 515.0], [33.1, 516.0], [33.2, 516.0], [33.3, 516.0], [33.4, 517.0], [33.5, 517.0], [33.6, 517.0], [33.7, 517.0], [33.8, 517.0], [33.9, 517.0], [34.0, 518.0], [34.1, 519.0], [34.2, 520.0], [34.3, 520.0], [34.4, 520.0], [34.5, 521.0], [34.6, 521.0], [34.7, 521.0], [34.8, 521.0], [34.9, 521.0], [35.0, 522.0], [35.1, 522.0], [35.2, 523.0], [35.3, 523.0], [35.4, 524.0], [35.5, 524.0], [35.6, 524.0], [35.7, 524.0], [35.8, 525.0], [35.9, 525.0], [36.0, 525.0], [36.1, 526.0], [36.2, 527.0], [36.3, 527.0], [36.4, 527.0], [36.5, 529.0], [36.6, 529.0], [36.7, 529.0], [36.8, 530.0], [36.9, 530.0], [37.0, 531.0], [37.1, 532.0], [37.2, 532.0], [37.3, 532.0], [37.4, 534.0], [37.5, 534.0], [37.6, 534.0], [37.7, 535.0], [37.8, 535.0], [37.9, 535.0], [38.0, 536.0], [38.1, 536.0], [38.2, 536.0], [38.3, 536.0], [38.4, 537.0], [38.5, 537.0], [38.6, 537.0], [38.7, 538.0], [38.8, 538.0], [38.9, 538.0], [39.0, 539.0], [39.1, 539.0], [39.2, 540.0], [39.3, 540.0], [39.4, 540.0], [39.5, 540.0], [39.6, 540.0], [39.7, 542.0], [39.8, 542.0], [39.9, 542.0], [40.0, 542.0], [40.1, 543.0], [40.2, 543.0], [40.3, 543.0], [40.4, 543.0], [40.5, 544.0], [40.6, 544.0], [40.7, 545.0], [40.8, 546.0], [40.9, 546.0], [41.0, 546.0], [41.1, 546.0], [41.2, 546.0], [41.3, 547.0], [41.4, 550.0], [41.5, 550.0], [41.6, 550.0], [41.7, 552.0], [41.8, 555.0], [41.9, 555.0], [42.0, 556.0], [42.1, 557.0], [42.2, 557.0], [42.3, 557.0], [42.4, 557.0], [42.5, 557.0], [42.6, 557.0], [42.7, 557.0], [42.8, 559.0], [42.9, 559.0], [43.0, 559.0], [43.1, 559.0], [43.2, 559.0], [43.3, 560.0], [43.4, 562.0], [43.5, 563.0], [43.6, 563.0], [43.7, 564.0], [43.8, 565.0], [43.9, 565.0], [44.0, 565.0], [44.1, 565.0], [44.2, 565.0], [44.3, 565.0], [44.4, 565.0], [44.5, 567.0], [44.6, 567.0], [44.7, 567.0], [44.8, 568.0], [44.9, 568.0], [45.0, 568.0], [45.1, 569.0], [45.2, 569.0], [45.3, 571.0], [45.4, 572.0], [45.5, 572.0], [45.6, 572.0], [45.7, 574.0], [45.8, 576.0], [45.9, 576.0], [46.0, 576.0], [46.1, 577.0], [46.2, 577.0], [46.3, 579.0], [46.4, 582.0], [46.5, 582.0], [46.6, 582.0], [46.7, 582.0], [46.8, 583.0], [46.9, 583.0], [47.0, 584.0], [47.1, 585.0], [47.2, 585.0], [47.3, 588.0], [47.4, 589.0], [47.5, 589.0], [47.6, 589.0], [47.7, 590.0], [47.8, 592.0], [47.9, 592.0], [48.0, 593.0], [48.1, 593.0], [48.2, 593.0], [48.3, 594.0], [48.4, 594.0], [48.5, 596.0], [48.6, 596.0], [48.7, 596.0], [48.8, 597.0], [48.9, 597.0], [49.0, 599.0], [49.1, 599.0], [49.2, 599.0], [49.3, 599.0], [49.4, 600.0], [49.5, 602.0], [49.6, 602.0], [49.7, 603.0], [49.8, 603.0], [49.9, 603.0], [50.0, 604.0], [50.1, 605.0], [50.2, 605.0], [50.3, 605.0], [50.4, 605.0], [50.5, 605.0], [50.6, 606.0], [50.7, 607.0], [50.8, 609.0], [50.9, 609.0], [51.0, 614.0], [51.1, 615.0], [51.2, 615.0], [51.3, 615.0], [51.4, 620.0], [51.5, 620.0], [51.6, 623.0], [51.7, 624.0], [51.8, 627.0], [51.9, 627.0], [52.0, 628.0], [52.1, 628.0], [52.2, 628.0], [52.3, 629.0], [52.4, 632.0], [52.5, 632.0], [52.6, 635.0], [52.7, 637.0], [52.8, 637.0], [52.9, 637.0], [53.0, 638.0], [53.1, 639.0], [53.2, 639.0], [53.3, 644.0], [53.4, 647.0], [53.5, 647.0], [53.6, 648.0], [53.7, 648.0], [53.8, 648.0], [53.9, 648.0], [54.0, 649.0], [54.1, 650.0], [54.2, 650.0], [54.3, 650.0], [54.4, 651.0], [54.5, 651.0], [54.6, 652.0], [54.7, 653.0], [54.8, 654.0], [54.9, 654.0], [55.0, 654.0], [55.1, 655.0], [55.2, 655.0], [55.3, 657.0], [55.4, 660.0], [55.5, 660.0], [55.6, 663.0], [55.7, 666.0], [55.8, 667.0], [55.9, 667.0], [56.0, 673.0], [56.1, 673.0], [56.2, 673.0], [56.3, 673.0], [56.4, 675.0], [56.5, 675.0], [56.6, 675.0], [56.7, 675.0], [56.8, 676.0], [56.9, 676.0], [57.0, 677.0], [57.1, 677.0], [57.2, 677.0], [57.3, 678.0], [57.4, 678.0], [57.5, 678.0], [57.6, 682.0], [57.7, 683.0], [57.8, 684.0], [57.9, 684.0], [58.0, 684.0], [58.1, 686.0], [58.2, 686.0], [58.3, 687.0], [58.4, 688.0], [58.5, 688.0], [58.6, 690.0], [58.7, 691.0], [58.8, 691.0], [58.9, 691.0], [59.0, 694.0], [59.1, 695.0], [59.2, 695.0], [59.3, 696.0], [59.4, 698.0], [59.5, 698.0], [59.6, 699.0], [59.7, 700.0], [59.8, 701.0], [59.9, 701.0], [60.0, 701.0], [60.1, 702.0], [60.2, 702.0], [60.3, 702.0], [60.4, 702.0], [60.5, 702.0], [60.6, 702.0], [60.7, 703.0], [60.8, 703.0], [60.9, 703.0], [61.0, 703.0], [61.1, 704.0], [61.2, 704.0], [61.3, 705.0], [61.4, 708.0], [61.5, 708.0], [61.6, 708.0], [61.7, 708.0], [61.8, 708.0], [61.9, 709.0], [62.0, 710.0], [62.1, 710.0], [62.2, 710.0], [62.3, 710.0], [62.4, 711.0], [62.5, 711.0], [62.6, 711.0], [62.7, 712.0], [62.8, 712.0], [62.9, 713.0], [63.0, 714.0], [63.1, 716.0], [63.2, 716.0], [63.3, 716.0], [63.4, 716.0], [63.5, 716.0], [63.6, 717.0], [63.7, 718.0], [63.8, 718.0], [63.9, 720.0], [64.0, 720.0], [64.1, 721.0], [64.2, 721.0], [64.3, 721.0], [64.4, 724.0], [64.5, 724.0], [64.6, 724.0], [64.7, 724.0], [64.8, 724.0], [64.9, 725.0], [65.0, 728.0], [65.1, 728.0], [65.2, 728.0], [65.3, 728.0], [65.4, 729.0], [65.5, 729.0], [65.6, 731.0], [65.7, 731.0], [65.8, 731.0], [65.9, 732.0], [66.0, 733.0], [66.1, 734.0], [66.2, 734.0], [66.3, 735.0], [66.4, 736.0], [66.5, 736.0], [66.6, 736.0], [66.7, 738.0], [66.8, 738.0], [66.9, 743.0], [67.0, 743.0], [67.1, 743.0], [67.2, 743.0], [67.3, 744.0], [67.4, 745.0], [67.5, 745.0], [67.6, 746.0], [67.7, 748.0], [67.8, 748.0], [67.9, 751.0], [68.0, 751.0], [68.1, 751.0], [68.2, 751.0], [68.3, 752.0], [68.4, 754.0], [68.5, 754.0], [68.6, 755.0], [68.7, 755.0], [68.8, 755.0], [68.9, 755.0], [69.0, 756.0], [69.1, 759.0], [69.2, 759.0], [69.3, 760.0], [69.4, 761.0], [69.5, 761.0], [69.6, 761.0], [69.7, 761.0], [69.8, 761.0], [69.9, 762.0], [70.0, 762.0], [70.1, 762.0], [70.2, 762.0], [70.3, 763.0], [70.4, 767.0], [70.5, 767.0], [70.6, 768.0], [70.7, 770.0], [70.8, 770.0], [70.9, 774.0], [71.0, 774.0], [71.1, 774.0], [71.2, 775.0], [71.3, 775.0], [71.4, 776.0], [71.5, 776.0], [71.6, 784.0], [71.7, 786.0], [71.8, 786.0], [71.9, 787.0], [72.0, 787.0], [72.1, 787.0], [72.2, 788.0], [72.3, 788.0], [72.4, 788.0], [72.5, 788.0], [72.6, 788.0], [72.7, 789.0], [72.8, 789.0], [72.9, 791.0], [73.0, 792.0], [73.1, 792.0], [73.2, 794.0], [73.3, 795.0], [73.4, 795.0], [73.5, 795.0], [73.6, 799.0], [73.7, 802.0], [73.8, 802.0], [73.9, 803.0], [74.0, 805.0], [74.1, 805.0], [74.2, 806.0], [74.3, 807.0], [74.4, 808.0], [74.5, 808.0], [74.6, 808.0], [74.7, 810.0], [74.8, 810.0], [74.9, 811.0], [75.0, 812.0], [75.1, 812.0], [75.2, 814.0], [75.3, 814.0], [75.4, 815.0], [75.5, 815.0], [75.6, 815.0], [75.7, 824.0], [75.8, 824.0], [75.9, 824.0], [76.0, 827.0], [76.1, 827.0], [76.2, 836.0], [76.3, 841.0], [76.4, 846.0], [76.5, 846.0], [76.6, 846.0], [76.7, 847.0], [76.8, 847.0], [76.9, 850.0], [77.0, 853.0], [77.1, 853.0], [77.2, 853.0], [77.3, 859.0], [77.4, 872.0], [77.5, 872.0], [77.6, 874.0], [77.7, 874.0], [77.8, 874.0], [77.9, 874.0], [78.0, 876.0], [78.1, 876.0], [78.2, 884.0], [78.3, 888.0], [78.4, 889.0], [78.5, 889.0], [78.6, 890.0], [78.7, 890.0], [78.8, 890.0], [78.9, 892.0], [79.0, 892.0], [79.1, 892.0], [79.2, 896.0], [79.3, 898.0], [79.4, 898.0], [79.5, 898.0], [79.6, 901.0], [79.7, 902.0], [79.8, 902.0], [79.9, 903.0], [80.0, 908.0], [80.1, 908.0], [80.2, 910.0], [80.3, 912.0], [80.4, 912.0], [80.5, 918.0], [80.6, 923.0], [80.7, 925.0], [80.8, 925.0], [80.9, 927.0], [81.0, 931.0], [81.1, 931.0], [81.2, 948.0], [81.3, 950.0], [81.4, 950.0], [81.5, 951.0], [81.6, 954.0], [81.7, 957.0], [81.8, 957.0], [81.9, 961.0], [82.0, 964.0], [82.1, 964.0], [82.2, 965.0], [82.3, 968.0], [82.4, 968.0], [82.5, 969.0], [82.6, 973.0], [82.7, 976.0], [82.8, 976.0], [82.9, 981.0], [83.0, 982.0], [83.1, 982.0], [83.2, 983.0], [83.3, 993.0], [83.4, 993.0], [83.5, 995.0], [83.6, 1005.0], [83.7, 1015.0], [83.8, 1015.0], [83.9, 1017.0], [84.0, 1023.0], [84.1, 1023.0], [84.2, 1032.0], [84.3, 1038.0], [84.4, 1038.0], [84.5, 1045.0], [84.6, 1049.0], [84.7, 1054.0], [84.8, 1054.0], [84.9, 1055.0], [85.0, 1056.0], [85.1, 1056.0], [85.2, 1058.0], [85.3, 1064.0], [85.4, 1064.0], [85.5, 1065.0], [85.6, 1077.0], [85.7, 1077.0], [85.8, 1077.0], [85.9, 1080.0], [86.0, 1089.0], [86.1, 1089.0], [86.2, 1096.0], [86.3, 1116.0], [86.4, 1116.0], [86.5, 1116.0], [86.6, 1122.0], [86.7, 1130.0], [86.8, 1130.0], [86.9, 1157.0], [87.0, 1160.0], [87.1, 1160.0], [87.2, 1162.0], [87.3, 1165.0], [87.4, 1165.0], [87.5, 1195.0], [87.6, 1202.0], [87.7, 1204.0], [87.8, 1204.0], [87.9, 1213.0], [88.0, 1221.0], [88.1, 1221.0], [88.2, 1224.0], [88.3, 1229.0], [88.4, 1229.0], [88.5, 1230.0], [88.6, 1234.0], [88.7, 1237.0], [88.8, 1237.0], [88.9, 1238.0], [89.0, 1242.0], [89.1, 1242.0], [89.2, 1261.0], [89.3, 1277.0], [89.4, 1277.0], [89.5, 1284.0], [89.6, 1285.0], [89.7, 1285.0], [89.8, 1285.0], [89.9, 1301.0], [90.0, 1302.0], [90.1, 1302.0], [90.2, 1314.0], [90.3, 1314.0], [90.4, 1314.0], [90.5, 1323.0], [90.6, 1333.0], [90.7, 1333.0], [90.8, 1337.0], [90.9, 1372.0], [91.0, 1373.0], [91.1, 1373.0], [91.2, 1382.0], [91.3, 1400.0], [91.4, 1400.0], [91.5, 1408.0], [91.6, 1443.0], [91.7, 1443.0], [91.8, 1452.0], [91.9, 1484.0], [92.0, 1484.0], [92.1, 1484.0], [92.2, 1489.0], [92.3, 1493.0], [92.4, 1493.0], [92.5, 1512.0], [92.6, 1523.0], [92.7, 1523.0], [92.8, 1567.0], [92.9, 1567.0], [93.0, 1580.0], [93.1, 1580.0], [93.2, 1591.0], [93.3, 1608.0], [93.4, 1608.0], [93.5, 1616.0], [93.6, 1648.0], [93.7, 1648.0], [93.8, 1683.0], [93.9, 1689.0], [94.0, 1695.0], [94.1, 1695.0], [94.2, 1729.0], [94.3, 1741.0], [94.4, 1741.0], [94.5, 1772.0], [94.6, 1799.0], [94.7, 1799.0], [94.8, 1858.0], [94.9, 1859.0], [95.0, 1887.0], [95.1, 1887.0], [95.2, 2030.0], [95.3, 2049.0], [95.4, 2049.0], [95.5, 2050.0], [95.6, 2088.0], [95.7, 2088.0], [95.8, 2118.0], [95.9, 2125.0], [96.0, 2330.0], [96.1, 2330.0], [96.2, 2478.0], [96.3, 2556.0], [96.4, 2556.0], [96.5, 2627.0], [96.6, 2667.0], [96.7, 2667.0], [96.8, 2682.0], [96.9, 2812.0], [97.0, 3427.0], [97.1, 3427.0], [97.2, 3555.0], [97.3, 3702.0], [97.4, 3702.0], [97.5, 3851.0], [97.6, 3867.0], [97.7, 3867.0], [97.8, 4004.0], [97.9, 4071.0], [98.0, 4293.0], [98.1, 4293.0], [98.2, 4362.0], [98.3, 4556.0], [98.4, 4556.0], [98.5, 4597.0], [98.6, 5629.0], [98.7, 5629.0], [98.8, 7134.0], [98.9, 7989.0], [99.0, 8597.0], [99.1, 8597.0], [99.2, 9255.0], [99.3, 10038.0], [99.4, 10038.0], [99.5, 13484.0], [99.6, 21990.0], [99.7, 21990.0], [99.8, 32254.0], [99.9, 55574.0], [100.0, 55574.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[0.0, 524.0], [0.1, 524.0], [0.2, 525.0], [0.3, 529.0], [0.4, 529.0], [0.5, 529.0], [0.6, 533.0], [0.7, 533.0], [0.8, 534.0], [0.9, 535.0], [1.0, 536.0], [1.1, 536.0], [1.2, 537.0], [1.3, 537.0], [1.4, 537.0], [1.5, 537.0], [1.6, 538.0], [1.7, 540.0], [1.8, 540.0], [1.9, 542.0], [2.0, 542.0], [2.1, 542.0], [2.2, 544.0], [2.3, 545.0], [2.4, 545.0], [2.5, 545.0], [2.6, 546.0], [2.7, 547.0], [2.8, 547.0], [2.9, 547.0], [3.0, 550.0], [3.1, 550.0], [3.2, 550.0], [3.3, 550.0], [3.4, 551.0], [3.5, 551.0], [3.6, 553.0], [3.7, 553.0], [3.8, 555.0], [3.9, 555.0], [4.0, 557.0], [4.1, 559.0], [4.2, 559.0], [4.3, 560.0], [4.4, 561.0], [4.5, 562.0], [4.6, 562.0], [4.7, 563.0], [4.8, 566.0], [4.9, 566.0], [5.0, 570.0], [5.1, 571.0], [5.2, 574.0], [5.3, 574.0], [5.4, 578.0], [5.5, 580.0], [5.6, 580.0], [5.7, 582.0], [5.8, 585.0], [5.9, 589.0], [6.0, 589.0], [6.1, 596.0], [6.2, 605.0], [6.3, 605.0], [6.4, 609.0], [6.5, 617.0], [6.6, 619.0], [6.7, 619.0], [6.8, 621.0], [6.9, 623.0], [7.0, 623.0], [7.1, 626.0], [7.2, 627.0], [7.3, 629.0], [7.4, 629.0], [7.5, 630.0], [7.6, 644.0], [7.7, 644.0], [7.8, 646.0], [7.9, 652.0], [8.0, 653.0], [8.1, 653.0], [8.2, 654.0], [8.3, 656.0], [8.4, 656.0], [8.5, 656.0], [8.6, 656.0], [8.7, 658.0], [8.8, 658.0], [8.9, 659.0], [9.0, 659.0], [9.1, 659.0], [9.2, 660.0], [9.3, 661.0], [9.4, 662.0], [9.5, 662.0], [9.6, 663.0], [9.7, 665.0], [9.8, 665.0], [9.9, 665.0], [10.0, 665.0], [10.1, 667.0], [10.2, 667.0], [10.3, 667.0], [10.4, 667.0], [10.5, 667.0], [10.6, 667.0], [10.7, 667.0], [10.8, 667.0], [10.9, 667.0], [11.0, 668.0], [11.1, 669.0], [11.2, 669.0], [11.3, 670.0], [11.4, 670.0], [11.5, 670.0], [11.6, 670.0], [11.7, 670.0], [11.8, 671.0], [11.9, 671.0], [12.0, 672.0], [12.1, 672.0], [12.2, 672.0], [12.3, 673.0], [12.4, 673.0], [12.5, 673.0], [12.6, 673.0], [12.7, 674.0], [12.8, 674.0], [12.9, 674.0], [13.0, 675.0], [13.1, 675.0], [13.2, 677.0], [13.3, 677.0], [13.4, 678.0], [13.5, 678.0], [13.6, 678.0], [13.7, 679.0], [13.8, 679.0], [13.9, 680.0], [14.0, 680.0], [14.1, 680.0], [14.2, 680.0], [14.3, 680.0], [14.4, 681.0], [14.5, 681.0], [14.6, 681.0], [14.7, 681.0], [14.8, 681.0], [14.9, 682.0], [15.0, 682.0], [15.1, 682.0], [15.2, 682.0], [15.3, 683.0], [15.4, 683.0], [15.5, 684.0], [15.6, 684.0], [15.7, 684.0], [15.8, 684.0], [15.9, 685.0], [16.0, 685.0], [16.1, 685.0], [16.2, 685.0], [16.3, 686.0], [16.4, 686.0], [16.5, 686.0], [16.6, 687.0], [16.7, 687.0], [16.8, 687.0], [16.9, 688.0], [17.0, 688.0], [17.1, 688.0], [17.2, 688.0], [17.3, 690.0], [17.4, 690.0], [17.5, 690.0], [17.6, 690.0], [17.7, 690.0], [17.8, 690.0], [17.9, 691.0], [18.0, 691.0], [18.1, 691.0], [18.2, 691.0], [18.3, 691.0], [18.4, 692.0], [18.5, 692.0], [18.6, 693.0], [18.7, 693.0], [18.8, 693.0], [18.9, 693.0], [19.0, 693.0], [19.1, 693.0], [19.2, 693.0], [19.3, 694.0], [19.4, 694.0], [19.5, 695.0], [19.6, 695.0], [19.7, 695.0], [19.8, 695.0], [19.9, 695.0], [20.0, 695.0], [20.1, 696.0], [20.2, 696.0], [20.3, 696.0], [20.4, 697.0], [20.5, 698.0], [20.6, 698.0], [20.7, 698.0], [20.8, 699.0], [20.9, 699.0], [21.0, 699.0], [21.1, 699.0], [21.2, 699.0], [21.3, 699.0], [21.4, 699.0], [21.5, 699.0], [21.6, 699.0], [21.7, 699.0], [21.8, 700.0], [21.9, 700.0], [22.0, 700.0], [22.1, 700.0], [22.2, 700.0], [22.3, 700.0], [22.4, 701.0], [22.5, 701.0], [22.6, 701.0], [22.7, 701.0], [22.8, 702.0], [22.9, 702.0], [23.0, 702.0], [23.1, 703.0], [23.2, 704.0], [23.3, 705.0], [23.4, 705.0], [23.5, 705.0], [23.6, 707.0], [23.7, 707.0], [23.8, 707.0], [23.9, 708.0], [24.0, 708.0], [24.1, 708.0], [24.2, 708.0], [24.3, 709.0], [24.4, 709.0], [24.5, 709.0], [24.6, 709.0], [24.7, 709.0], [24.8, 709.0], [24.9, 709.0], [25.0, 710.0], [25.1, 710.0], [25.2, 711.0], [25.3, 711.0], [25.4, 711.0], [25.5, 711.0], [25.6, 711.0], [25.7, 711.0], [25.8, 711.0], [25.9, 711.0], [26.0, 714.0], [26.1, 714.0], [26.2, 714.0], [26.3, 715.0], [26.4, 716.0], [26.5, 716.0], [26.6, 717.0], [26.7, 717.0], [26.8, 717.0], [26.9, 717.0], [27.0, 718.0], [27.1, 718.0], [27.2, 718.0], [27.3, 718.0], [27.4, 718.0], [27.5, 719.0], [27.6, 719.0], [27.7, 719.0], [27.8, 719.0], [27.9, 719.0], [28.0, 719.0], [28.1, 720.0], [28.2, 720.0], [28.3, 720.0], [28.4, 721.0], [28.5, 721.0], [28.6, 721.0], [28.7, 721.0], [28.8, 722.0], [28.9, 723.0], [29.0, 723.0], [29.1, 723.0], [29.2, 723.0], [29.3, 723.0], [29.4, 723.0], [29.5, 723.0], [29.6, 724.0], [29.7, 724.0], [29.8, 724.0], [29.9, 724.0], [30.0, 724.0], [30.1, 725.0], [30.2, 725.0], [30.3, 726.0], [30.4, 726.0], [30.5, 726.0], [30.6, 726.0], [30.7, 726.0], [30.8, 728.0], [30.9, 729.0], [31.0, 729.0], [31.1, 729.0], [31.2, 730.0], [31.3, 730.0], [31.4, 730.0], [31.5, 731.0], [31.6, 732.0], [31.7, 732.0], [31.8, 732.0], [31.9, 733.0], [32.0, 734.0], [32.1, 734.0], [32.2, 735.0], [32.3, 735.0], [32.4, 735.0], [32.5, 735.0], [32.6, 736.0], [32.7, 736.0], [32.8, 736.0], [32.9, 736.0], [33.0, 738.0], [33.1, 738.0], [33.2, 738.0], [33.3, 739.0], [33.4, 740.0], [33.5, 740.0], [33.6, 740.0], [33.7, 740.0], [33.8, 740.0], [33.9, 740.0], [34.0, 740.0], [34.1, 741.0], [34.2, 741.0], [34.3, 741.0], [34.4, 741.0], [34.5, 741.0], [34.6, 742.0], [34.7, 743.0], [34.8, 743.0], [34.9, 743.0], [35.0, 744.0], [35.1, 744.0], [35.2, 744.0], [35.3, 744.0], [35.4, 746.0], [35.5, 746.0], [35.6, 746.0], [35.7, 748.0], [35.8, 748.0], [35.9, 748.0], [36.0, 748.0], [36.1, 749.0], [36.2, 749.0], [36.3, 749.0], [36.4, 749.0], [36.5, 750.0], [36.6, 750.0], [36.7, 751.0], [36.8, 751.0], [36.9, 751.0], [37.0, 751.0], [37.1, 752.0], [37.2, 753.0], [37.3, 753.0], [37.4, 753.0], [37.5, 753.0], [37.6, 754.0], [37.7, 754.0], [37.8, 754.0], [37.9, 754.0], [38.0, 754.0], [38.1, 755.0], [38.2, 756.0], [38.3, 758.0], [38.4, 758.0], [38.5, 758.0], [38.6, 759.0], [38.7, 759.0], [38.8, 761.0], [38.9, 761.0], [39.0, 762.0], [39.1, 762.0], [39.2, 763.0], [39.3, 763.0], [39.4, 763.0], [39.5, 763.0], [39.6, 763.0], [39.7, 764.0], [39.8, 764.0], [39.9, 766.0], [40.0, 766.0], [40.1, 766.0], [40.2, 767.0], [40.3, 767.0], [40.4, 770.0], [40.5, 770.0], [40.6, 771.0], [40.7, 772.0], [40.8, 772.0], [40.9, 772.0], [41.0, 772.0], [41.1, 774.0], [41.2, 774.0], [41.3, 774.0], [41.4, 777.0], [41.5, 777.0], [41.6, 778.0], [41.7, 781.0], [41.8, 782.0], [41.9, 782.0], [42.0, 783.0], [42.1, 785.0], [42.2, 785.0], [42.3, 786.0], [42.4, 787.0], [42.5, 790.0], [42.6, 790.0], [42.7, 791.0], [42.8, 792.0], [42.9, 792.0], [43.0, 794.0], [43.1, 794.0], [43.2, 794.0], [43.3, 794.0], [43.4, 795.0], [43.5, 796.0], [43.6, 796.0], [43.7, 796.0], [43.8, 796.0], [43.9, 797.0], [44.0, 797.0], [44.1, 798.0], [44.2, 799.0], [44.3, 799.0], [44.4, 800.0], [44.5, 800.0], [44.6, 800.0], [44.7, 801.0], [44.8, 803.0], [44.9, 803.0], [45.0, 803.0], [45.1, 803.0], [45.2, 804.0], [45.3, 804.0], [45.4, 806.0], [45.5, 806.0], [45.6, 806.0], [45.7, 806.0], [45.8, 808.0], [45.9, 808.0], [46.0, 808.0], [46.1, 809.0], [46.2, 809.0], [46.3, 811.0], [46.4, 811.0], [46.5, 812.0], [46.6, 813.0], [46.7, 813.0], [46.8, 815.0], [46.9, 816.0], [47.0, 817.0], [47.1, 817.0], [47.2, 817.0], [47.3, 819.0], [47.4, 819.0], [47.5, 820.0], [47.6, 822.0], [47.7, 823.0], [47.8, 823.0], [47.9, 827.0], [48.0, 828.0], [48.1, 828.0], [48.2, 829.0], [48.3, 830.0], [48.4, 832.0], [48.5, 832.0], [48.6, 832.0], [48.7, 833.0], [48.8, 833.0], [48.9, 836.0], [49.0, 836.0], [49.1, 836.0], [49.2, 836.0], [49.3, 838.0], [49.4, 843.0], [49.5, 843.0], [49.6, 843.0], [49.7, 845.0], [49.8, 851.0], [49.9, 851.0], [50.0, 853.0], [50.1, 854.0], [50.2, 854.0], [50.3, 854.0], [50.4, 856.0], [50.5, 859.0], [50.6, 859.0], [50.7, 864.0], [50.8, 865.0], [50.9, 865.0], [51.0, 868.0], [51.1, 870.0], [51.2, 872.0], [51.3, 872.0], [51.4, 873.0], [51.5, 873.0], [51.6, 873.0], [51.7, 875.0], [51.8, 876.0], [51.9, 880.0], [52.0, 880.0], [52.1, 883.0], [52.2, 884.0], [52.3, 884.0], [52.4, 885.0], [52.5, 886.0], [52.6, 888.0], [52.7, 888.0], [52.8, 892.0], [52.9, 894.0], [53.0, 894.0], [53.1, 896.0], [53.2, 896.0], [53.3, 896.0], [53.4, 896.0], [53.5, 899.0], [53.6, 902.0], [53.7, 902.0], [53.8, 903.0], [53.9, 909.0], [54.0, 910.0], [54.1, 910.0], [54.2, 911.0], [54.3, 912.0], [54.4, 912.0], [54.5, 914.0], [54.6, 915.0], [54.7, 917.0], [54.8, 917.0], [54.9, 919.0], [55.0, 920.0], [55.1, 920.0], [55.2, 922.0], [55.3, 924.0], [55.4, 924.0], [55.5, 924.0], [55.6, 924.0], [55.7, 925.0], [55.8, 925.0], [55.9, 930.0], [56.0, 930.0], [56.1, 930.0], [56.2, 933.0], [56.3, 934.0], [56.4, 936.0], [56.5, 936.0], [56.6, 936.0], [56.7, 939.0], [56.8, 939.0], [56.9, 939.0], [57.0, 940.0], [57.1, 940.0], [57.2, 940.0], [57.3, 940.0], [57.4, 941.0], [57.5, 941.0], [57.6, 944.0], [57.7, 946.0], [57.8, 954.0], [57.9, 954.0], [58.0, 954.0], [58.1, 955.0], [58.2, 955.0], [58.3, 957.0], [58.4, 957.0], [58.5, 957.0], [58.6, 957.0], [58.7, 958.0], [58.8, 961.0], [58.9, 961.0], [59.0, 962.0], [59.1, 964.0], [59.2, 964.0], [59.3, 964.0], [59.4, 965.0], [59.5, 967.0], [59.6, 967.0], [59.7, 974.0], [59.8, 977.0], [59.9, 977.0], [60.0, 977.0], [60.1, 980.0], [60.2, 981.0], [60.3, 981.0], [60.4, 981.0], [60.5, 982.0], [60.6, 988.0], [60.7, 988.0], [60.8, 991.0], [60.9, 991.0], [61.0, 991.0], [61.1, 991.0], [61.2, 992.0], [61.3, 992.0], [61.4, 992.0], [61.5, 995.0], [61.6, 995.0], [61.7, 995.0], [61.8, 997.0], [61.9, 998.0], [62.0, 999.0], [62.1, 999.0], [62.2, 1001.0], [62.3, 1001.0], [62.4, 1001.0], [62.5, 1001.0], [62.6, 1003.0], [62.7, 1006.0], [62.8, 1006.0], [62.9, 1012.0], [63.0, 1015.0], [63.1, 1015.0], [63.2, 1017.0], [63.3, 1019.0], [63.4, 1021.0], [63.5, 1021.0], [63.6, 1027.0], [63.7, 1028.0], [63.8, 1028.0], [63.9, 1029.0], [64.0, 1029.0], [64.1, 1030.0], [64.2, 1030.0], [64.3, 1036.0], [64.4, 1036.0], [64.5, 1036.0], [64.6, 1040.0], [64.7, 1042.0], [64.8, 1042.0], [64.9, 1042.0], [65.0, 1046.0], [65.1, 1048.0], [65.2, 1048.0], [65.3, 1048.0], [65.4, 1052.0], [65.5, 1055.0], [65.6, 1055.0], [65.7, 1058.0], [65.8, 1064.0], [65.9, 1064.0], [66.0, 1065.0], [66.1, 1066.0], [66.2, 1066.0], [66.3, 1066.0], [66.4, 1067.0], [66.5, 1068.0], [66.6, 1068.0], [66.7, 1074.0], [66.8, 1074.0], [66.9, 1074.0], [67.0, 1081.0], [67.1, 1081.0], [67.2, 1083.0], [67.3, 1083.0], [67.4, 1089.0], [67.5, 1097.0], [67.6, 1097.0], [67.7, 1104.0], [67.8, 1106.0], [67.9, 1110.0], [68.0, 1110.0], [68.1, 1113.0], [68.2, 1115.0], [68.3, 1115.0], [68.4, 1116.0], [68.5, 1118.0], [68.6, 1119.0], [68.7, 1119.0], [68.8, 1131.0], [68.9, 1133.0], [69.0, 1133.0], [69.1, 1134.0], [69.2, 1134.0], [69.3, 1134.0], [69.4, 1134.0], [69.5, 1137.0], [69.6, 1138.0], [69.7, 1138.0], [69.8, 1143.0], [69.9, 1143.0], [70.0, 1145.0], [70.1, 1145.0], [70.2, 1148.0], [70.3, 1154.0], [70.4, 1154.0], [70.5, 1162.0], [70.6, 1165.0], [70.7, 1168.0], [70.8, 1168.0], [70.9, 1173.0], [71.0, 1173.0], [71.1, 1173.0], [71.2, 1175.0], [71.3, 1177.0], [71.4, 1180.0], [71.5, 1180.0], [71.6, 1186.0], [71.7, 1188.0], [71.8, 1188.0], [71.9, 1188.0], [72.0, 1189.0], [72.1, 1191.0], [72.2, 1191.0], [72.3, 1197.0], [72.4, 1202.0], [72.5, 1202.0], [72.6, 1211.0], [72.7, 1213.0], [72.8, 1226.0], [72.9, 1226.0], [73.0, 1233.0], [73.1, 1234.0], [73.2, 1234.0], [73.3, 1239.0], [73.4, 1240.0], [73.5, 1243.0], [73.6, 1243.0], [73.7, 1252.0], [73.8, 1252.0], [73.9, 1252.0], [74.0, 1253.0], [74.1, 1255.0], [74.2, 1260.0], [74.3, 1260.0], [74.4, 1262.0], [74.5, 1262.0], [74.6, 1262.0], [74.7, 1265.0], [74.8, 1269.0], [74.9, 1270.0], [75.0, 1270.0], [75.1, 1274.0], [75.2, 1276.0], [75.3, 1276.0], [75.4, 1277.0], [75.5, 1278.0], [75.6, 1291.0], [75.7, 1291.0], [75.8, 1298.0], [75.9, 1298.0], [76.0, 1298.0], [76.1, 1303.0], [76.2, 1306.0], [76.3, 1317.0], [76.4, 1317.0], [76.5, 1319.0], [76.6, 1320.0], [76.7, 1320.0], [76.8, 1337.0], [76.9, 1347.0], [77.0, 1352.0], [77.1, 1352.0], [77.2, 1366.0], [77.3, 1368.0], [77.4, 1368.0], [77.5, 1375.0], [77.6, 1384.0], [77.7, 1384.0], [77.8, 1384.0], [77.9, 1398.0], [78.0, 1399.0], [78.1, 1399.0], [78.2, 1399.0], [78.3, 1418.0], [78.4, 1418.0], [78.5, 1418.0], [78.6, 1421.0], [78.7, 1428.0], [78.8, 1428.0], [78.9, 1435.0], [79.0, 1442.0], [79.1, 1442.0], [79.2, 1452.0], [79.3, 1458.0], [79.4, 1463.0], [79.5, 1463.0], [79.6, 1469.0], [79.7, 1470.0], [79.8, 1470.0], [79.9, 1471.0], [80.0, 1472.0], [80.1, 1475.0], [80.2, 1475.0], [80.3, 1478.0], [80.4, 1481.0], [80.5, 1481.0], [80.6, 1482.0], [80.7, 1488.0], [80.8, 1489.0], [80.9, 1489.0], [81.0, 1509.0], [81.1, 1520.0], [81.2, 1520.0], [81.3, 1520.0], [81.4, 1526.0], [81.5, 1528.0], [81.6, 1528.0], [81.7, 1535.0], [81.8, 1537.0], [81.9, 1537.0], [82.0, 1539.0], [82.1, 1540.0], [82.2, 1544.0], [82.3, 1544.0], [82.4, 1555.0], [82.5, 1566.0], [82.6, 1566.0], [82.7, 1578.0], [82.8, 1592.0], [82.9, 1598.0], [83.0, 1598.0], [83.1, 1601.0], [83.2, 1620.0], [83.3, 1620.0], [83.4, 1622.0], [83.5, 1622.0], [83.6, 1632.0], [83.7, 1632.0], [83.8, 1639.0], [83.9, 1644.0], [84.0, 1644.0], [84.1, 1647.0], [84.2, 1656.0], [84.3, 1668.0], [84.4, 1668.0], [84.5, 1682.0], [84.6, 1685.0], [84.7, 1685.0], [84.8, 1686.0], [84.9, 1692.0], [85.0, 1696.0], [85.1, 1696.0], [85.2, 1698.0], [85.3, 1700.0], [85.4, 1700.0], [85.5, 1701.0], [85.6, 1712.0], [85.7, 1713.0], [85.8, 1713.0], [85.9, 1714.0], [86.0, 1717.0], [86.1, 1717.0], [86.2, 1725.0], [86.3, 1729.0], [86.4, 1730.0], [86.5, 1730.0], [86.6, 1734.0], [86.7, 1748.0], [86.8, 1748.0], [86.9, 1749.0], [87.0, 1756.0], [87.1, 1763.0], [87.2, 1763.0], [87.3, 1775.0], [87.4, 1775.0], [87.5, 1775.0], [87.6, 1777.0], [87.7, 1780.0], [87.8, 1781.0], [87.9, 1781.0], [88.0, 1784.0], [88.1, 1798.0], [88.2, 1798.0], [88.3, 1810.0], [88.4, 1816.0], [88.5, 1818.0], [88.6, 1818.0], [88.7, 1820.0], [88.8, 1838.0], [88.9, 1838.0], [89.0, 1855.0], [89.1, 1856.0], [89.2, 1856.0], [89.3, 1860.0], [89.4, 1866.0], [89.5, 1875.0], [89.6, 1875.0], [89.7, 1884.0], [89.8, 1885.0], [89.9, 1885.0], [90.0, 1890.0], [90.1, 1892.0], [90.2, 1902.0], [90.3, 1902.0], [90.4, 1918.0], [90.5, 1936.0], [90.6, 1936.0], [90.7, 1946.0], [90.8, 1967.0], [90.9, 1983.0], [91.0, 1983.0], [91.1, 2003.0], [91.2, 2029.0], [91.3, 2029.0], [91.4, 2032.0], [91.5, 2041.0], [91.6, 2063.0], [91.7, 2063.0], [91.8, 2064.0], [91.9, 2170.0], [92.0, 2170.0], [92.1, 2194.0], [92.2, 2230.0], [92.3, 2249.0], [92.4, 2249.0], [92.5, 2271.0], [92.6, 2298.0], [92.7, 2298.0], [92.8, 2309.0], [92.9, 2361.0], [93.0, 2404.0], [93.1, 2404.0], [93.2, 2414.0], [93.3, 2434.0], [93.4, 2434.0], [93.5, 2476.0], [93.6, 2477.0], [93.7, 2484.0], [93.8, 2484.0], [93.9, 2488.0], [94.0, 2538.0], [94.1, 2538.0], [94.2, 2568.0], [94.3, 2593.0], [94.4, 2675.0], [94.5, 2675.0], [94.6, 2709.0], [94.7, 2724.0], [94.8, 2724.0], [94.9, 2778.0], [95.0, 2816.0], [95.1, 2845.0], [95.2, 2845.0], [95.3, 2867.0], [95.4, 2982.0], [95.5, 2982.0], [95.6, 2991.0], [95.7, 3038.0], [95.8, 3046.0], [95.9, 3046.0], [96.0, 3100.0], [96.1, 3141.0], [96.2, 3141.0], [96.3, 3222.0], [96.4, 3324.0], [96.5, 3502.0], [96.6, 3502.0], [96.7, 3781.0], [96.8, 3923.0], [96.9, 3923.0], [97.0, 3963.0], [97.1, 4010.0], [97.2, 4053.0], [97.3, 4053.0], [97.4, 4093.0], [97.5, 4150.0], [97.6, 4150.0], [97.7, 4248.0], [97.8, 4314.0], [97.9, 4460.0], [98.0, 4460.0], [98.1, 4572.0], [98.2, 4894.0], [98.3, 4894.0], [98.4, 5146.0], [98.5, 5548.0], [98.6, 5739.0], [98.7, 5739.0], [98.8, 5868.0], [98.9, 6127.0], [99.0, 6127.0], [99.1, 8320.0], [99.2, 9129.0], [99.3, 9399.0], [99.4, 9399.0], [99.5, 12811.0], [99.6, 17666.0], [99.7, 17666.0], [99.8, 23318.0], [99.9, 75092.0]], "isOverall": false, "label": " About Us", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 200.0, "series": [{"data": [[8500.0, 1.0], [9200.0, 1.0], [600.0, 72.0], [10000.0, 1.0], [700.0, 98.0], [800.0, 41.0], [13400.0, 1.0], [900.0, 28.0], [1000.0, 19.0], [1100.0, 9.0], [1200.0, 16.0], [1300.0, 10.0], [1400.0, 8.0], [21900.0, 1.0], [1500.0, 6.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 3.0], [32200.0, 1.0], [2000.0, 4.0], [2100.0, 2.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [55500.0, 1.0], [3700.0, 1.0], [3800.0, 2.0], [4000.0, 2.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 2.0], [5600.0, 1.0], [400.0, 200.0], [7100.0, 1.0], [7900.0, 1.0], [500.0, 145.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[600.0, 111.0], [700.0, 161.0], [800.0, 66.0], [900.0, 61.0], [1000.0, 39.0], [1100.0, 34.0], [1200.0, 26.0], [1300.0, 16.0], [1400.0, 19.0], [1500.0, 15.0], [1600.0, 16.0], [1700.0, 21.0], [1800.0, 14.0], [1900.0, 6.0], [2000.0, 6.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 7.0], [2500.0, 3.0], [2600.0, 1.0], [2800.0, 3.0], [2700.0, 3.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 2.0], [3300.0, 1.0], [3200.0, 1.0], [3500.0, 1.0], [3700.0, 1.0], [3900.0, 2.0], [4000.0, 3.0], [4200.0, 1.0], [4100.0, 1.0], [4300.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [5100.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [5700.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [12800.0, 1.0], [17600.0, 1.0], [23300.0, 1.0], [75000.0, 1.0], [500.0, 44.0]], "isOverall": false, "label": " About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 75000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 189.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1022.0, "series": [{"data": [[0.0, 201.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1022.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 189.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.071428571428573, "minX": 1.69530498E12, "maxY": 30.0, "series": [{"data": [[1.69530552E12, 30.0], [1.69530522E12, 30.0], [1.69530558E12, 30.0], [1.69530576E12, 29.448275862068968], [1.69530546E12, 30.0], [1.69530516E12, 30.0], [1.69530582E12, 12.071428571428573], [1.69530504E12, 29.956989247311842], [1.6953057E12, 30.0], [1.6953054E12, 30.0], [1.6953051E12, 30.0], [1.69530528E12, 30.0], [1.69530498E12, 22.1], [1.69530564E12, 30.0], [1.69530534E12, 30.0]], "isOverall": false, "label": "Endurance Testing ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530582E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 455.0, "minX": 1.0, "maxY": 2264.0, "series": [{"data": [[8.0, 497.0], [9.0, 468.0], [10.0, 651.0], [11.0, 460.0], [12.0, 501.0], [13.0, 485.0], [14.0, 455.0], [16.0, 479.0], [4.0, 714.0], [17.0, 543.0], [18.0, 471.0], [20.0, 495.0], [5.0, 582.0], [21.0, 600.0], [22.0, 458.0], [25.0, 499.0], [28.0, 732.0], [7.0, 648.0], [29.0, 484.0], [30.0, 1029.5384615384614]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[29.547925608011447, 1013.8111587982837]], "isOverall": false, "label": " Career-Aggregated", "isController": false}, {"data": [[2.0, 919.0], [11.0, 698.0], [12.0, 930.0], [3.0, 691.0], [15.0, 622.0], [1.0, 1489.0], [18.0, 946.0], [19.0, 785.5], [20.0, 2264.0], [21.0, 954.3333333333334], [22.0, 939.0], [23.0, 678.0], [24.0, 989.25], [6.0, 709.0], [25.0, 974.0], [26.0, 543.5], [27.0, 778.75], [28.0, 691.0], [29.0, 790.1666666666667], [30.0, 1363.2470414201182]], "isOverall": false, "label": " About Us", "isController": false}, {"data": [[29.532959326788234, 1339.830294530153]], "isOverall": false, "label": " About Us-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 30.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.5, "minX": 1.69530498E12, "maxY": 106734.08333333333, "series": [{"data": [[1.69530552E12, 104549.85], [1.69530522E12, 97532.66666666667], [1.69530558E12, 88100.91666666667], [1.69530576E12, 106734.08333333333], [1.69530546E12, 93049.03333333334], [1.69530516E12, 94140.33333333333], [1.69530582E12, 24727.283333333333], [1.69530504E12, 84708.05], [1.6953057E12, 92646.0], [1.6953054E12, 101847.43333333333], [1.6953051E12, 105184.05], [1.69530528E12, 101270.63333333333], [1.69530498E12, 10927.7], [1.69530564E12, 104491.65], [1.69530534E12, 91725.08333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69530552E12, 1845.1666666666667], [1.69530522E12, 1704.8333333333333], [1.69530558E12, 1646.1666666666667], [1.69530576E12, 1865.6666666666667], [1.69530546E12, 1573.3333333333333], [1.69530516E12, 1583.5833333333333], [1.69530582E12, 485.3333333333333], [1.69530504E12, 1524.9166666666667], [1.6953057E12, 1539.75], [1.6953054E12, 1700.5833333333333], [1.6953051E12, 1776.5833333333333], [1.69530528E12, 1814.4166666666667], [1.69530498E12, 102.5], [1.69530564E12, 1799.9166666666667], [1.69530534E12, 1665.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530582E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 530.9827586206897, "minX": 1.69530498E12, "maxY": 2267.9795918367354, "series": [{"data": [[1.69530552E12, 1765.3448275862072], [1.69530522E12, 563.7924528301887], [1.69530558E12, 852.4727272727273], [1.69530576E12, 530.9827586206897], [1.69530546E12, 1163.3829787234044], [1.69530516E12, 630.3829787234042], [1.69530582E12, 546.8823529411765], [1.69530504E12, 2267.9795918367354], [1.6953057E12, 985.7333333333332], [1.6953054E12, 741.2999999999998], [1.6953051E12, 909.924528301887], [1.69530528E12, 681.3620689655173], [1.69530564E12, 894.7090909090907], [1.69530534E12, 1399.7777777777778]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69530552E12, 1010.6071428571431], [1.69530522E12, 2183.7924528301896], [1.69530558E12, 1171.5581395348836], [1.69530576E12, 789.2413793103449], [1.69530546E12, 1211.3962264150941], [1.69530516E12, 951.9814814814816], [1.69530582E12, 858.6363636363636], [1.69530504E12, 1834.9318181818176], [1.6953057E12, 1262.9074074074078], [1.6953054E12, 1356.4915254237285], [1.6953051E12, 1475.5833333333337], [1.69530528E12, 1059.188679245283], [1.69530498E12, 1174.8], [1.69530564E12, 1845.913793103448], [1.69530534E12, 1474.5744680851062]], "isOverall": false, "label": " About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530582E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 438.89655172413796, "minX": 1.69530498E12, "maxY": 2135.040816326531, "series": [{"data": [[1.69530552E12, 698.2758620689657], [1.69530522E12, 463.52830188679246], [1.69530558E12, 560.727272727273], [1.69530576E12, 438.89655172413796], [1.69530546E12, 571.1276595744682], [1.69530516E12, 488.02127659574467], [1.69530582E12, 451.8823529411765], [1.69530504E12, 2135.040816326531], [1.6953057E12, 534.2666666666665], [1.6953054E12, 504.58], [1.6953051E12, 684.7358490566039], [1.69530528E12, 511.49999999999994], [1.69530564E12, 600.527272727273], [1.69530534E12, 774.5555555555554]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69530552E12, 670.8749999999999], [1.69530522E12, 524.4150943396229], [1.69530558E12, 792.4651162790694], [1.69530576E12, 558.9137931034481], [1.69530546E12, 734.2264150943397], [1.69530516E12, 585.5925925925927], [1.69530582E12, 632.2727272727273], [1.69530504E12, 1255.159090909091], [1.6953057E12, 756.8888888888888], [1.6953054E12, 738.6610169491521], [1.6953051E12, 691.3166666666665], [1.69530528E12, 724.9622641509435], [1.69530498E12, 741.8000000000001], [1.69530564E12, 1449.6724137931033], [1.69530534E12, 1051.936170212766]], "isOverall": false, "label": " About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530582E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69530498E12, "maxY": 779.2931034482759, "series": [{"data": [[1.69530552E12, 0.0], [1.69530522E12, 0.4716981132075471], [1.69530558E12, 0.0], [1.69530576E12, 0.0], [1.69530546E12, 0.0], [1.69530516E12, 0.0], [1.69530582E12, 0.0], [1.69530504E12, 0.0], [1.6953057E12, 0.0], [1.6953054E12, 0.0], [1.6953051E12, 0.0], [1.69530528E12, 0.0], [1.69530564E12, 0.0], [1.69530534E12, 0.0]], "isOverall": false, "label": " Career", "isController": false}, {"data": [[1.69530552E12, 185.92857142857144], [1.69530522E12, 96.13207547169813], [1.69530558E12, 255.16279069767444], [1.69530576E12, 72.89655172413794], [1.69530546E12, 241.84905660377368], [1.69530516E12, 132.90740740740742], [1.69530582E12, 183.54545454545456], [1.69530504E12, 40.13636363636365], [1.6953057E12, 238.85185185185188], [1.6953054E12, 217.30508474576274], [1.6953051E12, 159.9166666666667], [1.69530528E12, 274.9811320754717], [1.69530498E12, 128.3], [1.69530564E12, 779.2931034482759], [1.69530534E12, 518.2127659574467]], "isOverall": false, "label": " About Us", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530582E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 448.0, "minX": 1.69530498E12, "maxY": 75092.0, "series": [{"data": [[1.69530552E12, 55574.0], [1.69530522E12, 75092.0], [1.69530558E12, 8597.0], [1.69530576E12, 2063.0], [1.69530546E12, 7989.0], [1.69530516E12, 3502.0], [1.69530582E12, 1489.0], [1.69530504E12, 32254.0], [1.6953057E12, 9255.0], [1.6953054E12, 8320.0], [1.6953051E12, 23318.0], [1.69530528E12, 4572.0], [1.69530498E12, 3100.0], [1.69530564E12, 12811.0], [1.69530534E12, 21990.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69530552E12, 1391.5], [1.69530522E12, 954.3], [1.69530558E12, 1630.500000000001], [1.69530576E12, 908.6999999999998], [1.69530546E12, 2158.000000000001], [1.69530516E12, 1193.2], [1.69530582E12, 979.8000000000008], [1.69530504E12, 3462.600000000002], [1.6953057E12, 1763.0], [1.6953054E12, 1685.0], [1.6953051E12, 1788.8000000000002], [1.69530528E12, 1288.2], [1.69530498E12, 2916.2000000000007], [1.69530564E12, 2477.2], [1.69530534E12, 1911.1999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69530552E12, 47927.44999999971], [1.69530522E12, 69954.62999999945], [1.69530558E12, 8597.0], [1.69530576E12, 1999.9299999999994], [1.69530546E12, 7952.729999999981], [1.69530516E12, 3477.3800000000047], [1.69530582E12, 1489.0], [1.69530504E12, 32254.0], [1.6953057E12, 9255.0], [1.6953054E12, 8002.600000000019], [1.6953051E12, 21052.23999999999], [1.69530528E12, 4533.119999999999], [1.69530498E12, 3100.0], [1.69530564E12, 11875.239999999996], [1.69530534E12, 21750.96000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69530552E12, 1935.75], [1.69530522E12, 1346.8999999999987], [1.69530558E12, 2410.7], [1.69530576E12, 1017.5999999999999], [1.69530546E12, 3825.5499999999906], [1.69530516E12, 1525.3999999999999], [1.69530582E12, 1461.5499999999997], [1.69530504E12, 6759.999999999989], [1.6953057E12, 2709.0], [1.6953054E12, 3290.5], [1.6953051E12, 2617.6], [1.69530528E12, 1998.1999999999953], [1.69530498E12, 3100.0], [1.69530564E12, 3587.7999999999984], [1.69530534E12, 2403.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69530552E12, 451.0], [1.69530522E12, 448.0], [1.69530558E12, 456.0], [1.69530576E12, 448.0], [1.69530546E12, 464.0], [1.69530516E12, 460.0], [1.69530582E12, 455.0], [1.69530504E12, 469.0], [1.6953057E12, 456.0], [1.6953054E12, 454.0], [1.6953051E12, 454.0], [1.69530528E12, 455.0], [1.69530498E12, 553.0], [1.69530564E12, 467.0], [1.69530534E12, 456.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69530552E12, 722.0], [1.69530522E12, 657.5], [1.69530558E12, 733.5], [1.69530576E12, 666.5], [1.69530546E12, 803.5], [1.69530516E12, 701.0], [1.69530582E12, 616.5], [1.69530504E12, 1015.0], [1.6953057E12, 816.0], [1.6953054E12, 774.0], [1.6953051E12, 743.0], [1.69530528E12, 699.0], [1.69530498E12, 942.5], [1.69530564E12, 982.0], [1.69530534E12, 892.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530582E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 713.5, "minX": 1.0, "maxY": 1175.5, "series": [{"data": [[1.0, 714.0], [2.0, 713.5], [4.0, 755.5], [8.0, 1175.5], [5.0, 864.5], [3.0, 733.0], [6.0, 883.5], [7.0, 952.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 454.0, "minX": 1.0, "maxY": 578.5, "series": [{"data": [[1.0, 454.0], [2.0, 460.5], [4.0, 490.0], [8.0, 567.5], [5.0, 578.5], [3.0, 479.0], [6.0, 567.0], [7.0, 536.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.69530498E12, "maxY": 1.9333333333333333, "series": [{"data": [[1.69530552E12, 1.8833333333333333], [1.69530522E12, 1.7666666666666666], [1.69530558E12, 1.6333333333333333], [1.69530576E12, 1.9333333333333333], [1.69530546E12, 1.5833333333333333], [1.69530516E12, 1.7], [1.69530582E12, 0.4666666666666667], [1.69530504E12, 1.6], [1.6953057E12, 1.6166666666666667], [1.6953054E12, 1.9], [1.6953051E12, 1.8166666666666667], [1.69530528E12, 1.8833333333333333], [1.69530498E12, 0.18333333333333332], [1.69530564E12, 1.9166666666666667], [1.69530534E12, 1.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530582E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.69530498E12, "maxY": 1.9333333333333333, "series": [{"data": [[1.69530552E12, 1.9], [1.69530522E12, 1.7666666666666666], [1.69530558E12, 1.6333333333333333], [1.69530576E12, 1.9333333333333333], [1.69530546E12, 1.6666666666666667], [1.69530516E12, 1.6833333333333333], [1.69530582E12, 0.4666666666666667], [1.69530504E12, 1.55], [1.6953057E12, 1.65], [1.6953054E12, 1.8166666666666667], [1.6953051E12, 1.8833333333333333], [1.69530528E12, 1.85], [1.69530498E12, 0.16666666666666666], [1.69530564E12, 1.8833333333333333], [1.69530534E12, 1.6833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530582E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.69530498E12, "maxY": 1.0, "series": [{"data": [[1.69530552E12, 0.9666666666666667], [1.69530522E12, 0.8833333333333333], [1.69530558E12, 0.9166666666666666], [1.69530576E12, 0.9666666666666667], [1.69530546E12, 0.7833333333333333], [1.69530516E12, 0.7833333333333333], [1.69530582E12, 0.2833333333333333], [1.69530504E12, 0.8166666666666667], [1.6953057E12, 0.75], [1.6953054E12, 0.8333333333333334], [1.6953051E12, 0.8833333333333333], [1.69530528E12, 0.9666666666666667], [1.69530564E12, 0.9166666666666666], [1.69530534E12, 0.9]], "isOverall": false, "label": " Career-success", "isController": false}, {"data": [[1.69530552E12, 0.9333333333333333], [1.69530522E12, 0.8833333333333333], [1.69530558E12, 0.7166666666666667], [1.69530576E12, 0.9666666666666667], [1.69530546E12, 0.8833333333333333], [1.69530516E12, 0.9], [1.69530582E12, 0.18333333333333332], [1.69530504E12, 0.7333333333333333], [1.6953057E12, 0.9], [1.6953054E12, 0.9833333333333333], [1.6953051E12, 1.0], [1.69530528E12, 0.8833333333333333], [1.69530498E12, 0.16666666666666666], [1.69530564E12, 0.9666666666666667], [1.69530534E12, 0.7833333333333333]], "isOverall": false, "label": " About Us-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530582E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.69530498E12, "maxY": 1.9333333333333333, "series": [{"data": [[1.69530552E12, 1.9], [1.69530522E12, 1.7666666666666666], [1.69530558E12, 1.6333333333333333], [1.69530576E12, 1.9333333333333333], [1.69530546E12, 1.6666666666666667], [1.69530516E12, 1.6833333333333333], [1.69530582E12, 0.4666666666666667], [1.69530504E12, 1.55], [1.6953057E12, 1.65], [1.6953054E12, 1.8166666666666667], [1.6953051E12, 1.8833333333333333], [1.69530528E12, 1.85], [1.69530498E12, 0.16666666666666666], [1.69530564E12, 1.8833333333333333], [1.69530534E12, 1.6833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530582E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

